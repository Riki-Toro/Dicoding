Load Balancing (Penyeimbang Beban)
    Saat kita berbicara mengenai load balancing alias penyeimbang beban/muatan, Anda harus berkenalan dengan layanan Elastic Load Balancing (ELB). 

    ELB secara otomatis mendistribusikan lalu lintas data yang masuk ke beberapa target, seperti Amazon EC2 instance, container, alamat IP, Lambda function, dan lainnya. ELB dapat menangani berbagai beban lalu lintas data, baik di dalam satu Availability Zone atau tersebar ke beberapa Availability Zone.

    20210421152553a4058d0348f83092549784a327f30e70.png

    Dalam mendesain arsitektur aplikasi, kita tentunya harus memahami bagaimana Web Tier bekerja, beserta dengan penggunaan ELB dalam perancangannya. Dalam pelaksanaannya, ELB tidak hanya mengirim data ke EC2 instance, tetapi juga metrik ke Amazon CloudWatch (layanan pemantauan). 

    Metrik dari Amazon EC2 dan ELB dapat juga bertindak sebagai pemicu (trigger) sehingga jika kita melihat kondisi latensi yang sangat tinggi atau server digunakan hingga mendekati batas maksimum, kita dapat memanfaatkan fungsi Auto Scaling (penyesuaian kapasitas otomatis) untuk menambahkan lebih banyak kapasitas ke armada server web.

    Setelah mengetahui tentang cara kerjanya, perhatikan poin-poin di bawah ini yang menjelaskan karakteristik dari AWS Elastic Load Balancing:

        1. Menggunakan protokol HTTP, HTTPS, TCP dan SSL (secure TCP).
        2. Bisa eksternal atau internal facing.
        3. Setiap load balancer akan menggunakan DNS name.
        4. Mengenali dan merespons terhadap instance yang tidak sehat (unhealthy).

    AWS ELB menawarkan tiga jenis load balancer yang semuanya memiliki fitur high availability, auto scaling, dan robust security yang diperlukan untuk membuat aplikasi kita lebih fault tolerance (toleran terhadap kegagalan). Ketiga jenis load balancer tersebut dijelaskan pada gambar di bawah ini.

    20210421152611135757715062988d53df93c5690dc205.png

    Oke, kita telah mengenal berbagai jenis ELB. Sekarang muncul suatu pertanyaan, “Apa sih keuntungan kita menggunakan AWS Elastic Load Balancing?” Alright, berikut adalah uraiannya:

        High Availability
            ELB secara otomatis mendistribusikan lalu lintas ke banyak target—Amazon EC2 instance, container, dan alamat IP—dalam satu atau beberapa Availability Zone.

        Health Checks
            Untuk menjamin availability dari Amazon EC2 instance Anda, load balancing secara berkala mengirim ping, mencoba koneksi, atau mengirim permintaan untuk mengetes instance.

            Tes ini disebut health check. Setiap Amazon EC2 instance terdaftar harus merespons target health check dengan kode status HTTP 200 agar terdeteksi dengan status sehat oleh load balancing Anda.

        Fitur Keamanan
            ELB yang dibuat dalam Amazon VPC juga memanfaatkan fitur keamanan jaringan VPC tersebut, seperti Security Group.

        TLS Termination
            ELB menyediakan manajemen sertifikat terintegrasi dan dekripsi SSL yang memungkinkan kita mengelola pengaturan SSL load balancing secara terpusat dan melepaskan pekerjaan intensif CPU dari aplikasi Anda.


    Pola Desain Cloud: Application Load Balancer
        Application Load Balancer (ALB) beroperasi pada lapisan aplikasi, layanan ini membuat keputusan perutean dan load balancing (penyeimbangan beban) pada lalu lintas aplikasi menggunakan HTTP dan HTTPS.

        Beberapa fitur untuk membantu kita dalam menggunakan fitur dari ALB antara lain:

        Perutean berbasis konten
            Hal ini memungkinkan kita menentukan aturan yang merutekan lalu lintas ke target group yang berbeda berdasarkan URL path. Target group biasanya mewakili sekumpulan layanan yang akan digunakan.

        Dukungan container
            Fitur ini memberikan kemampuan untuk melakukan load balancing untuk beberapa port pada Amazon EC2 instance yang sama. Fungsionalitas ini secara khusus menargetkan implementasi container yang diintegrasikan dalam layanan Amazon ECS.

        Pemantauan aplikasi
            Fitur ini memungkinkan kita memantau dan melakukan kontrol health check per target group.

    Tak afdal rasanya jika kita telah belajar mengenai ALB, tetapi tidak membahas contoh arsitektur aplikasi penggunaannya. Berikut adalah contoh penggunaan dengan fitur perutean berbasis konten: 

    2021060411125611981c22164e9eaaea9f3aefdeccd608.png

    Pada gambar di atas kita menggunakan sebuah Application Load Balancer untuk mengatur beban tiga sub-URL dari suatu aplikasi web, misalnya www.example.com. Masing-masing sub-URL mengacu kepada sepasang EC2 instance yang tersebar ke dua Availability Zone sebagai fitur dari high availability. 

    Untuk mempelajari lebih lanjut, Anda bisa melihat tautan berikut: Introducing Application Load Balancer - Unlocking and Optimizing Architectures.





High Availability (Ketersediaan Tinggi)
    Saat merancang suatu arsitektur, Anda harus mempertimbangkan soal aspek yang satu ini, yaitu High Availability atau Ketersediaan Tinggi. High Availability didefinisikan sebagai, “Kemampuan di mana aplikasi kita dapat pulih dari kegagalan atau beralih ke sumber sekunder dalam jumlah waktu kinerja terdegradasi yang masih dapat diterima.”

    Semakin tinggi Availability-nya, semakin andal pula aplikasi kita, tetapi tentu saja ini akan berpengaruh terhadap biaya yang harus ditanggung. Tabel berikut menunjukkan perhitungan Uptime / Ketersediaan.

    Uptime (%)	    |       Maksimal downtime per tahun	            |       Downtime jika disetarakan per hari
    ----------------------------------------------------------------------------------------------------------
    90%             |               36,5 hari                       |                   2,4 jam
    99%             |               3,65 hari                       |                   14 menit
    99,9%           |               8,76 jam                        |                   86 detik
    99,99%          |               52,6 menit                      |                   8,6 detik
    99,999%         |               5,25 menit                      |                   0,86 detik


    Mendesain Ketersediaan
        Dalam mendesain Ketersediaan, kita harus mengantisipasi kegagalan, dilanjutkan kemudian dengan memperhatikan dampaknya. Sebagai contoh dapat dilihat pada gambar di bawah ini.

        20210421152821568e7b7724b02ce4c154fe1c471c7c49.png

        Gambar di atas memperlihatkan arsitektur sebuah aplikasi yang mencakup dua app server dan dua database server dengan replikasi. Ini adalah arsitektur minimum untuk memenuhi standar ketersediaan tinggi.


    Availability Zones
        Sebagian besar aplikasi dapat dirancang untuk mendukung dua Availability Zone. Pada umumnya aplikasi tersebut tidak memperoleh keuntungan lebih dari penggunaan lebih banyak dari dua Availability Zone, terutama ketika kita menggunakan sumber data yang hanya mendukung failover primer dan sekunder. 

        Availability Zone tersebar secara fisik. Pada prinsipnya, kita tidak akan menerima manfaat lebih dengan menduplikasi sumber daya kita di tiga atau lebih Availability Zone dalam satu region.

        2021060411142482349ab05c069474733d779ec5886c84.png

        Gambar di atas memperlihatkan contoh arsitektur yang berada di dua Availability Zone. 




Multi-Region High Availability dan DNS
    Amazon Route 53 menyediakan Domain Name System (DNS) alias Sistem Penamaan Domain, pendaftaran nama domain, dan layanan health check untuk aplikasi web Anda. 

    Layanan ini dirancang untuk memberi developer dan bisnis cara yang mengarahkan pelanggan Anda ke alamat aplikasi tertentu di internet dengan menerjemahkan nama seperti example.com ke alamat IP numerik (misal 202.100.100.5) yang digunakan komputer untuk terkoneksi satu sama lain. 

    20210604111522d2b31eff676c8ff0326d0ffda78ecb08.png

    Kita dapat menggabungkan DNS dengan layanan health-check untuk mengarahkan lalu lintas ke endpoint yang dituju atau secara independen memantau availability dari endpoint tersebut. Kita juga dapat membeli dan mengelola nama domain seperti example.com dan secara otomatis mengonfigurasi pengaturan DNS untuk domain Anda. 

    Route 53 secara efektif menghubungkan permintaan pengguna ke infrastruktur yang berjalan di AWS, seperti Amazon EC2 instance, ELB, atau Amazon S3 bucket. Bahkan, layanan ini juga dapat digunakan untuk merutekan pengguna ke infrastruktur di luar AWS.

    Berikut adalah beberapa opsi untuk melakukan routing di Amazon Route 53:

        Simple round robin
            Mendistribusikan jumlah permintaan dengan merata di antara semua server yang terlibat.

        Weighted round robin
            Menggunakan mekanisme pembobotan kepada kumpulan DNS Record tertentu untuk menghasilkan pengaturan yang berbeda berdasarkan pembobotan.

        Latency-based routing (LBR)
            Membantu kita meningkatkan kinerja aplikasi untuk akses global. LBR bekerja dengan merutekan pelanggan ke endpoint AWS berdasarkan latency (misalnya Amazon EC2 instance, Elastic IP address, atau Elastic Load Balancing).

            Opsi ini memberikan hasil pengalaman terbaik berdasarkan pengukuran kinerja aktual dari berbagai AWS Region di mana aplikasi kita berjalan.

        Health check and DNS failover
            Memantau kesehatan dan kinerja aplikasi web, server web, dan sumber daya lainnya. Setiap health check yang kita buat dapat memantau salah satu dari berikut ini:

                Kesehatan sumber daya tertentu, seperti server web.
                Status dari health check lainnya.
                Status Amazon CloudWatch alarm.

        Geolocation routing
            Memungkinkan kita memilih sumber daya yang melayani lalu lintas berdasarkan lokasi geografis pengguna (asal query DNS).

        Geoproximity routing with traffic biasing
            Memungkinkan kita mengarahkan lalu lintas berdasarkan jarak fisik antara pengguna dan sumber daya jika kita menggunakan traffic flow (arus lalu lintas) Route 53.


        Multi-value answers
            Jika ingin merutekan lalu lintas secara acak ke beberapa sumber daya, seperti server web, kita dapat membuat satu DNS record Multi-value answer untuk setiap sumber daya dan--secara opsional--mengaitkan health check Amazon Route 53 dengan setiap DNS record tersebut.

    Oke, tibalah kita di penghujung modul ini, cukup panjang ya pembahasan kita kali ini. Tapi tak mengapa, tetaplah semangat karena perjalanan kita masih panjang. Let’s Go!
