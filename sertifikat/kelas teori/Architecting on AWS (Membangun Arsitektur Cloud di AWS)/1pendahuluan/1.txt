Pengantar ke Architecting on AWS
    Halo, pecinta AWS! Dengan mengikuti kelas ini, Anda berarti sudah paham atau bahkan menguasai dasar-dasar AWS Cloud.

    Dari nama kelasnya, tentu sudah jelas bahwa kelas ini akan membahas cara membangun arsitektur di AWS. Itu berarti, diharapkan Anda sudah pernah berinteraksi dengan layanan-layanan cloud, men-deploy aplikasi sederhana, atau sekadar meng-hosting website statis.

    Di kelas ini juga akan sedikit bersinggungan dengan istilah-istilah pada pengembangan software. Maka dari itu, pahamilah terlebih dahulu materi tentang SDLC alias Software Development Life Cycle. 

    Tentu bagi Anda yang sudah pernah mengembangkan produk dalam suatu tim/perusahaan tak akan kaget mendengar kata itu. SDLC adalah sebuah proses yang dapat membantu dalam mengembangkan perangkat lunak yang berkualitas, teruji, hemat waktu, hemat biaya, dan juga sesuai dengan apa yang pelanggan harapkan. SDLC terdiri dari 7 fase, yaitu:

        Planning (Perencanaan) 
        Requirement Analysis (Analisis kebutuhan) 
        Design & Prototyping (Perancangan dan Pembuatan Prototipe) 
        Development (Pengembangan) 
        Testing (Pengujian) 
        Deployment (Penggelaran) 
        Maintenance (Pemeliharaan)

    Oke, sekarang Anda sudah paham dengan SDLC. Pertanyaannya, saat mengembangkan sebuah aplikasi, apakah Anda memperhatikan beberapa hal seperti scaling, cost optimization, atau bahkan serverless? Atau jangan-jangan, Anda mengembangkannya dengan arsitektur yang asal-asalan tanpa memedulikan hal-hal tersebut?

    Nah, maka dari itu, ikuti setiap materi di kelas ini agar Anda dapat menguasai dan paham cara membangun arsitektur yang andal, aman, dan optimal, baik untuk arsitektur yang sederhana maupun berskala besar. 

    Di sinilah kita berada. Selamat datang di modul pengantar dari kelas Architecting on AWS. Di modul ini kita akan berdiskusi mengenai hal-hal berikut:

        Apa itu AWS?
        AWS Well-Architected Framework
        Prinsip desain umum untuk cloud
        Desain arsitektur berskala besar

    Penasaran seperti apa pembahasannya? Mari kita mulai!

    Skenario
        Sebelum masuk ke pembahasan, mari kita buat suatu skenario yang kontinu pada kelas ini. Katakanlah Anda dan beberapa kawan memiliki rencana besar untuk memulai startup. Startup ini nantinya akan bergerak di bidang penjualan kopi dan akan menjadi yang terbaik di dunia.

        Rencananya, Anda dan tim akan gencar melakukan promosi, ekspansi, dan lain sebagainya agar startup ini berkembang. Anda pun sepakat bahwa untuk mewujudkannya pasti diperlukan sistem IT yang fleksibel, agile, dan mampu berkembang mengikuti perjalanan bisnis yang tentunya akan naik-turun seperti roller coaster.

        Anda dan tim setuju bahwa menjalankan bisnis secara offline saat ini tidaklah cukup. Selain offline, perlu ada peranan IT yang mendukung bisnis agar dapat lebih berkembang pesat. Namun, sistem IT seperti apa yang cocok untuk start-up ya?

        Jawabannya adalah dengan menggunakan cloud. Dengan begitu, disepakati juga bahwa sebaiknya Anda dan tim perlu memiliki dasar pemahaman yang baik mengenai cloud dengan mengikuti kelas Architecting on AWS. 

        Nah, kalau begitu, tunggu apa lagi? Simak pembahasan lebih lanjut di modul berikutnya!




Pengenalan AWS
    Sebelum membahas lebih jauh mengenai arsitektur cloud lebih dalam, mari kita berkenalan dulu dengan AWS.

    AWS atau Amazon Web Services lahir dari pengalaman Amazon.com dalam membuat e-commerce. Amazon didirikan oleh Jeff Bezos di Bellevue, Amerika Serikat pada tahun 1994. Dalam perkembangannya, sekitar tahun 2000, Amazon.com mulai mengalami kesulitan dalam hal keandalan sistem (highly available) dan skalabilitas.

    Dari sisi tool e-commerce, bisa dibilang mirip benang kusut. Aplikasi dan arsitektur dibangun tanpa perencanaan yang baik. Untuk membangun database, perlu waktu hampir 3 bulan lamanya. Bahkan, setiap tim membangun sendiri sumber dayanya tanpa berdiskusi terlebih dahulu dengan tim lain untuk kemungkinan penggunaan ulang. 

    Nah, berkaca dari keadaan yang semrawut serta pengalaman yang menyakitkan tersebut, Amazon.com akhirnya berhasil diredefinisi ulang oleh tim internal perusahaan dengan sistem yang lebih reliable, scalable, dan highly available. 

    Dari pengalaman membangun ulang tersebut, akhirnya pada tahun 2006 Amazon.com bangkit dan menjual layanan-layanannya secara terpisah sebagai Amazon Web Services.




AWS Well-Architected Framework
    Seperti yang telah diuraikan pada awal modul, kita harus membangun arsitektur yang andal, aman, dan optimal. Begitu juga saat membangun arsitektur untuk startup warung kopi kita. Kita memerlukan suatu acuan atau best practice (praktik terbaik) sebagai referensi dan pembanding untuk arsitektur yang kita bangun. 

    Tanpa adanya best practice tersebut, mungkin saat membuat dan menjalankan aplikasi di cloud, Anda sering bertanya-tanya, “Apakah yang saya lakukan ini sudah benar?”

    Nah, untuk menjawab pertanyaan ini, AWS telah membuat Well-Architected Framework, yaitu sebuah dokumen hidup (living document) yang pertama kali dikeluarkan pada tahun 2015. Pada saat modul pengantar ini dibuat, AWS Well-Architected Framework yang terbaru rilis pada bulan Juli 2020.

    Catat! Karena teknologi selalu berkembang, AWS Well-Architected Framework juga akan terus diperbaharui. Maka dari itu, ada baiknya Anda senantiasa memeriksa dokumen terbaru di laman web AWS, terutama jika ada pembuatan aplikasi yang membutuhkan fitur baru dari AWS.

    AWS Well-Architected Framework awalnya dibuat dalam bentuk whitepaper, yakni buku panduan yang dapat diakses secara online. Tetapi seiring dengan perkembangannya, AWS Well-Architected Framework juga diperkaya dengan hands-on labs dan juga AWS Well-Architected Tools. Kita akan belajar lebih jauh mengenai hal-hal tersebut dalam modul ini.

    AWS Well-Architected Framework memiliki lima pilar utama yang dijadikan sebagai fondasi dasar dalam membangun cloud. Selain itu, AWS Well-Architected Framework juga memiliki beberapa prinsip desain umum untuk Cloud, mari kita bahas terlebih dahulu prinsip-prinsip tersebut.


        Prinsip Desain Umum untuk Cloud
            AWS Well-Architected Framework menyarankan prinsip-prinsip di bawah ini untuk memfasilitasi desain yang baik untuk cloud:

        Berhenti memperkirakan kebutuhan kapasitas
            Cloud Computing menerapkan prinsip skalabilitas, yakni kita tidak perlu lagi mengestimasi atau memperkirakan kebutuhan kapasitas.

            Jadi, pada saat membuat desain untuk cloud--terutama AWS--kita bisa mulai dengan kapasitas seminim mungkin, lalu menambah ataupun mengurangi kapasitas sesuai kebutuhan.


        Tes sistem pada spesifikasi yang sama dengan production
            Di cloud, kita bisa membuat lingkungan testing pada spesifikasi yang sama dengan production. Setelah testing selesai, Anda bisa menonaktifkan atau bahkan menghapus lingkungan testing tersebut.


        Gunakan automasi untuk memudahkan dalam berinovasi
            Dengan automasi, kita dapat membuat dan mereplikasi sistem dengan biaya murah dan waktu yang cepat. Selain itu, kita bisa mencatat perubahan yang ada, mengaudit dampaknya, dan mengembalikan kondisi sistem ke parameter sebelumnya jika diperlukan. Sehingga dalam melakukan inovasi akan lebih cepat mudah dan murah.


        Arsitektur yang memungkinkan perubahan secara evolusioner
            Cloud memungkinkan kita untuk melakukan automasi dan testing sesuai keperluan. Hal ini sangat membantu dalam meminimalisir risiko akibat perubahan dari sisi desain. Seiring dengan perkembangan dan perubahan bisnis perusahaan, IT juga sebaiknya memiliki kemampuan untuk mengakomodasi perubahan tersebut.

            Bahkan, cloud juga memungkinkan sistem kita untuk berkembang dan mengadopsi hal-hal baru yang inovatif dan dapat memberikan kontribusi nyata terhadap perkembangan bisnis.


        Gunakan data sebagai dasar dari arsitektur aplikasi
            Cloud memungkinkan kita untuk mengumpulkan data yang menunjukkan bagaimana dampak dari perubahan terhadap arsitektur aplikasi yang kita buat. Artinya, saat ingin membuat perbaikan, kita dapat membuat keputusan berdasarkan fakta.

            Karena infrastruktur dari aplikasi kita berbentuk code, maka kita dapat membuat perubahan dari sisi arsitektur dan infrastruktur secara berkala dengan lebih mudah daripada on-premise.


        Tes arsitektur secara berkala
            Tes arsitektur dan sistem Anda secara berkala dengan melakukan simulasi terhadap hal-hal yang mungkin terjadi di production. Ini bertujuan untuk membantu Anda dalam mengidentifikasi kelemahan yang dapat diperbaiki serta menghindari hal-hal yang tidak diinginkan terjadi pada perusahaan Anda.