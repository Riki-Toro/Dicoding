Perulangan
    Ketika menulis program komputer, akan ada situasi di mana kita perlu melakukan hal yang sama berkali-kali. Misalnya kita ingin menampilkan semua nama pengguna yang terdaftar di aplikasi atau sesederhana menampilkan angka 1 sampai 10. Tentunya tidak praktis jika kita menulis kode seperti berikut:

        console.log(1);
        console.log(2);
        console.log(3);
        console.log(4);
        console.log(5);
        console.log(6);
        console.log(7);
        console.log(8);
        console.log(9);
        console.log(10);

    Bagaimana jika kita perlu menampilkan angka 1 sampai 100? Sudah terbayang repotnya, bukan? Maka dari itu kita perlu mempelajari teknik yang dapat mengatasi permasalahan tersebut, teknik ini disebut dengan looping. JavaScript memiliki banyak opsi untuk melakukan looping atau perulangan kode, antara lain:

        For loop
            Dari beberapa cara melakukan proses loop pada JavaScript, “for” merupakan salah satu cara yang banyak digunakan. Struktur dasar dari for tampak seperti berikut:

            Berikut ini contoh penerapannya secara nyata:

                for(let i = 0; i < 5; i++) {
                    console.log(i);
                }

                /* output
                0
                1
                2
                3
                4
                */

            Lebih ringkas, bukan? Mungkin kode tersebut sulit dipahami, jadi mari kita bahas sedikit demi sedikit. Terdapat tiga bagian utama dalam sintaks for di atas:

                Pertama, variabel i sebagai index iterasi. Pada variabel ini kita menginisialisasi nilai awal dari perulangan.
                Kedua, operasi perbandingan. Pada bagian ini, JavaScript akan melakukan pengecekan kondisi apakah perulangan masih perlu dilakukan. Jika bernilai true, maka kode di dalam blok for akan dijalankan.
                Ketiga, increment/decrement. Di sini kita melakukan penambahan atau pengurangan variabel iterasi. Jadi, pada contoh di atas variabel i akan ditambah dengan 1 di setiap akhir perulangan. Perubahan nilai ini penting karena jika kita mengubah nilainya, proses perulangan dapat berjalan selamanya karena kondisi akan terus terpenuhi.

            Jika diartikan, maka kode di atas bisa dimaknai dengan “Jika i kurang dari 5, maka tampilkan nilai i.”

        For of loop
            Cara lain dalam melakukan looping adalah menggunakan for..of. For of mulai hadir pada ECMAScript 2015 (ES6). Cara ini jauh lebih sederhana dan modern dibanding for loop biasa. Sintaks dasar dari for of loop adalah seperti ini:

                for(arrayItem of myArray) {
                    // do something
                }

            Yup, for of tidak membutuhkan banyak statement untuk melakukan looping pada array. Penjelasan tentang array akan lebih detail dibahas pada materi berikutnya. Sebagai permulaan, kita bisa menganggap array sebagai kumpulan nilai yang disimpan dalam satu variabel.

            Dengan for..of nilai tiap array akan diinisialisasi pada variabel baru yang kita tentukan pada tiap proses looping-nya. Jumlah proses looping-nya pun akan menyesuaikan dengan ukuran dari array. Sederhananya seperti kita melakukan perintah “Hei JavaScript! Lakukan perulangan pada myArray, akses tiap nilainya, dan simpan pada variabel arrayItem”. Pada proses looping kita gunakan variabel arrayItem untuk mengakses tiap nilai dari item myArray.

            Agak sulit memang menjelaskan dengan kata-kata, mari kita terjemahkan dalam kode secara langsung.

                let myArray = ["Luke", "Han", "Chewbacca", "Leia"];

                    for(const arrayItem of myArray) {
                    console.log(arrayItem)
                }

                /* output
                Luke
                Han
                Chewbacca
                Leia
                */

            Lebih mudah dan simpel bukan?

        While and do-while
            Metode lain untuk melakukan looping adalah dengan statement while. Sama seperti for, instruksi while mengevaluasi ekspresi boolean dan menjalankan kode di dalam blok while ketika bernilai true.

            Untuk menampilkan angka 1 sampai 100 dengan while kita bisa menulis kode seperti berikut:

                let i = 1;

                while (i <= 100) {
                    console.log(i);
                    i++;
                }

            Bisa dilihat pada kode di atas bahwa looping dengan while tidak memiliki ketergantungan dengan variabel iterasi seperti pada for loop. Karena itu, meskipun while dapat melakukan perulangan yang sama dengan for, while lebih cocok digunakan pada kasus di mana kita tidak tahu pasti berapa banyak perulangan yang diperlukan.

            Bentuk lain dari while adalah perulangan do-while.

                let i = 1;

                do {
                    console.log(i);
                    i++;
                } while (i <= 100);

            Kondisi pada while akan dievaluasi sebelum blok kode di dalamnya dijalankan, sedangkan do-while akan mengevaluasi boolean expression setelah blok kodenya berjalan. Ini artinya kode di dalam do-while akan dijalankan setidaknya satu kali.

        Infinite loops
            Ketika menerapkan perulangan pada program, ada satu kondisi yang perlu kita hindari yaitu infinite loop. Infinite loop atau endless loop adalah kondisi di mana program kita stucked di dalam perulangan. Ia akan berjalan terus hingga menyebabkan crash pada aplikasi dan komputer kecuali ada intervensi secara eksternal, seperti mematikan aplikasi.

            Kode berikut ini adalah contoh di mana kondisi infinite loop dapat terjadi:

                let i = 1;
                
                while (i <= 5) {
                    console.log(i);
                }
            
            Dapatkah Anda menemukan apa yang salah dari kode di atas sehingga terjadi infinite loop?

            Jawabannya adalah karena variabel i selalu bernilai 1. Alhasil, kondisi i <= 5 akan selalu bernilai true yang mengakibatkan aplikasi akan terus mencetak 1 ke konsol sehingga mengalami crash.



Struktur Data
    Sebelumnya kita sempat mempelajari tentang variabel dan tipe data yang ada di JavaScript. Tipe data yang kita bahas sebelumnya termasuk dalam kategori tipe data primitif yang hanya bisa menyimpan satu nilai.

    Pada modul ini kita akan membahas tentang tipe data JavaScript yang dapat menyimpan struktur data yang lebih kompleks. Beberapa jenis struktur data yang akan kita pelajari, antara lain adalah objek dan array.

    Sudah siap? Mari kita lanjut ke materi selanjutnya!

        Object
            Kali ini kita akan berkenalan dengan tipe data object. Sebuah tipe data yang sangat berguna dalam pengembangan aplikasi dengan JavaScript. Object mampu menyimpan nilai dari beragam tipe data dan membentuk data yang lebih kompleks.

            Untuk menetapkan objek pada sebuah variabel kita gunakan tanda kurung kurawal {}.

                const user = {};

            Object berisi pasangan key dan value yang juga dikenal dengan property. Key berperan mirip seperti nama variabel yang menyimpan sebuah nilai. Sementara, value berisi nilai dengan tipe data apa pun termasuk objek lain. Key dan value di dalam object dituliskan seperti berikut:

                let object = {key1: "value1", key2: "value2", key3: "value3"}

            Key harus berupa string dan dituliskan sebelum titik dua (:), lalu diikuti dengan value-nya. Meskipun key merupakan string, kita tidak perlu menuliskan tanda petik kecuali ada karakter khusus seperti spasi.

            anda koma di akhir properti bersifat opsional. Namun, jika tanda koma tersebut ditulis akan lebih memudahkan ketika kita ingin memindah, mengubah, atau menghapus properti.

            Satu object dapat memiliki beberapa pasang key-value yang dipisahkan dengan tanda koma (,).

                const user = {firstName: "Luke", lastName: "Skywalker", age: 19, isJedi: true};

            Dalam menuliskan objek, baris baru tidaklah penting dan tidak akan berpengaruh apa pun. Sehingga lebih baik setiap kita menetapkan key-value buatlah baris baru untuk memisahkan antar nilainya. Hal ini akan memudahkan kita dalam membaca dan memahami struktur data dari sebuah object.

                const user = {
                    firstName: "Luke",
                    lastName: "Skywalker",
                    age: 19,
                    isJedi: true,
                };

            Kemudian untuk mengakses nilai dari properti object, kita dapat memanggil nama object lalu tanda titik dan diikuti nama propertinya. Contoh:

                const user = {
                    firstName: "Luke",
                    lastName: "Skywalker",
                    age: 19,
                    isJedi: true,
                };

                console.log("Halo, nama saya " + user.firstName + " " + user.lastName);
                console.log("Umur saya " + user.age + " tahun");

                /* output
                Halo, nama saya Luke Skywalker
                Umur saya 19 tahun
                */

            Selain dot operator, kita juga bisa mengakses properti dari object menggunakan bracket atau tanda kurung siku.

                user["home world"];

            Untuk mengakses key yang memiliki spasi atau karakter khusus lainnya maka kita perlu menggunakan bracket seperti di atas.

                const user = {
                    firstName: "Luke",
                    lastName: "Skywalker",
                    age: 19,
                    isJedi: true,
                    "home world": "Tattooine"
                };
                console.log("Halo, nama saya " + user.firstName + " " + user.lastName);
                console.log("Umur saya " + user.age + " tahun");
                console.log("Saya berasal dari " + user["home world"]);
                /* output
                Halo, nama saya Luke Skywalker
                Umur saya 19 tahun
                Saya berasal dari Tattooine
                */

            Setelah mempelajari bagaimana membuat object dan menampilkan property di dalamnya, selanjutnya kita akan memodifikasi sebuah object. Untuk mengubah nilai properti di dalam object kita gunakan assignment operator (=).

                const spaceship = {
                    name: "Millenium Falcon",
                    manufacturer: "Corellian Engineering Corporation",
                    maxSpeed: 1200,
                    color: "Light gray"
                };

                spaceship.color = "Glossy red";
                spaceship["maxSpeed"] = 1300;
                console.log(spaceship);

                /* output
                {
                name: 'Millenium Falcon',
                manufacturer: 'Corellian Engineering Corporation',
                maxSpeed: 1300,
                color: 'Glossy red'
                }
                */

            Tunggu dulu. Object spaceship dideklarasikan sebagai const, tetapi kenapa kita bisa mengubah nilainya?

            Yang perlu diperhatikan adalah mengubah nilai berbeda dengan menginisialisasi ulang nilai. Ketika membuat sebuah object, kita tidak terikat dengan properti di dalamnya sehingga kita masih bisa memodifikasi nilainya. Berbeda jika kita menginisialisasi ulang variabel dari object.

                const spaceship = {
                    name: "Millenium Falcon",
                    manufacturer: "Corellian Engineering Corporation",
                    maxSpeed: 1200,
                    color: "Light gray"
                };
            
                spaceship = { name: "New Millenium Falcon" }; // Error

            Ketika kita mengubah object menggunakan assignment operator dan property/key-nya sudah ada, maka nilai di dalamnya akan tergantikan dengan nilai yang baru. Sedangkan, jika property dengan nama key yang ditentukan tidak ditemukan, maka properti baru akan ditambahkan ke object.

                const spaceship = {
                    name: "Millenium Falcon",
                    manufacturer: "Corellian Engineering Corporation",
                    maxSpeed: 1200,
                    color: "Light gray"
                };

                spaceship.color = "Glossy red";
                spaceship["maxSpeed"] = 1300;
                spaceship.class = "Light freighter";

                console.log(spaceship);

                /* output
                {
                name: 'Millenium Falcon',
                manufacturer: 'Corellian Engineering Corporation',
                maxSpeed: 1300,
                color: 'Glossy red',
                class: 'Light freighter'
                }
                */

            Kita juga dapat menghapus property pada object menggunakan keyword delete seperti berikut:

                const spaceship = {
                    name: "Millenium Falcon",
                    manufacturer: "Corellian Engineering Corporation",
                    maxSpeed: 1200,
                    color: "Light gray"
                };
                
                spaceship.color = "Glossy red";
                spaceship["maxSpeed"] = 1300;
                
                delete spaceship.manufacturer;
                
                console.log(spaceship);
                
                /* output
                { name: 'Millenium Falcon', maxSpeed: 1300, color: 'Glossy red' }
                */