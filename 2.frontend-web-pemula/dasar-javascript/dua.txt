Operator
    Pada materi ini kita akan mempelajari tentang operator yang terdapat pada JavaScript. Operator dalam bahasa pemrograman sendiri adalah simbol yang memberi tahu interpreter untuk melakukan operasi seperti matematika, relasional, atau logika untuk memberikan hasil tertentu.

    Assignment Operator
        Dari contoh kode yang kita gunakan sebelumnya, sebenarnya kita sudah menggunakan assignment operator. Operator ini digunakan untuk memberikan nilai pada variabel.

        Pada dasarnya operator ini adalah tanda sama dengan (=), di mana tanda ini digunakan untuk menginisialisasi nilai pada variabel. Tempatkan variabel yang ingin diberi nilai di sebelah kiri, sementara nilainya di sebelah kanan. Di antara keduanya terdapat operator assignment.

            x = y;

        Expression di atas berarti kita menginisialisasikan nilai y pada variabel x, sehingga nilai x sekarang memiliki nilai yang sama dengan y.

        Ada beberapa assignment operator tambahan lain dalam menginisialisasikan nilai pada variabel. Kita bisa menyebutnya sebagai shortcut dalam menentukan nilai. Contohnya:

            let x = 10;
            let y = 5

            x += y;

            console.log(x);

            /* output
            15
            */

        Pada contoh kode di atas, terdapat expression x += y; Apa artinya? Assignment operator tersebut digunakan sebagai shortcut dari x = x + y. Cara ini juga dapat digunakan pada operator aritmatika lain seperti, perkalian, pengurangan, pembagian, dan lainnya.

            let x = 10;
            let y = 5;
            
            x += y; // artinya -> x = x + y;
            x -= y; // artinya -> x = x - y;
            x *= y; // artinya -> x = x * y;
            x /= y; // artinya -> x = x / y;
            x %= y; // artinya -> x = x % y;

    Comparison Operator
        Sekarang kita sudah mengetahui bagaimana cara menyimpan nilai pada sebuah variabel. Nah, selanjutnya kita akan belajar mengenai operator komparasi sebagai logika dasar dalam membandingkan nilai pada JavaScript.

        Terdapat serangkaian karakter khusus yang disebut dengan operator pembanding/komparasi yang dapat mengevaluasi dan membandingkan dua nilai. Berikut daftar operator dan fungsinya:

            == Membandingkan kedua nilai apakah sama. (tidak identik).
            != Membandingkan kedua nilai apakah tidak sama. (tidak identik).
            === Membandingkan kedua nilai apakah identik.
            !== Membandingkan kedua nilai apakah tidak identik.
            > Membandingkan dua nilai apakah nilai pertama lebih dari nilai kedua.
            >= Membandingkan dua nilai apakah nilai pertama lebih atau sama dengan nilai kedua.
            < Membandingkan dua nilai apakah nilai pertama kurang dari nilai kedua.
            <= Membandingkan dua nilai apakah nilai pertama kurang atau sama dengan nilai kedua.

        Ketika kita melakukan perbandingan antara dua nilai, JavaScript akan mengevaluasi kedua nilai tersebut dan mengembalikan boolean dengan nilai hasil perbandingan tersebut, baik false atau true. Berikut contohnya:

            let a = 10;
            let b = 12;

            console.log(a < b);
            console.log(a > b);

            /* output
            true
            false
            */

        Perbedaan antara “Sama” dan “Identik”
            Dalam operator komparasi di JavaScript, hal yang menjadi sedikit “tricky” adalah membedakan antara “sama” (==) dan “identik” (===).

            Kita sudah mengetahui bahwa setiap nilai pasti memiliki tipe data baik itu number, string atau boolean. Contohnya sebuah string “10” dan number 10 merupakan hal yang serupa, tetapi keduanya tidak benar-benar sama.

            Hal inilah yang membedakan antara sama dan identik pada JavaScript. Jika kita ingin membandingkan hanya dari kesamaan nilainya kita bisa gunakan == tapi jika kita ingin membandingkan dengan memperhatikan tipe datanya kita gunakan ===.

            Contohnya seperti berikut:

                const aString = '10';
                const aNumber = 10

                console.log(aString == aNumber) // true, karena nilainya sama-sama 10
                console.log(aString === aNumber) // false, karena walaupun nilainya sama, tetapi tipe datanya berbeda

                /* output
                true
                false
                */


        Logical Operator
            Terdapat beberapa operator lain yang dapat kita gunakan untuk menetapkan logika yang lebih kompleks, yakni dengan logical operators. Dengan logical operator, kita dapat menggunakan kombinasi dari dua nilai boolean atau bahkan lebih dalam menetapkan logika.

            Pada JavaScript terdapat tiga buah karakter khusus yang berfungsi sebagai logical operator. Berikut macam-macam logical operator dan fungsinya:

                && Operator dan (and). Logika akan menghasilkan nilai true apabila semua kondisi terpenuhi (bernilai true).
                || Operator atau (or). Logika akan menghasilkan nilai true apabila ada salah satu kondisi terpenuhi (bernilai true).
                ! Operator tidak (not). Digunakan untuk membalikkan suatu kondisi.

            Berikut contoh penerapannya pada JavaScript:

                let a = 10;
                let b = 12;

                /* AND operator */
                console.log(a < 15 && b > 10); // (true && true) -> true
                console.log(a > 15 && b > 10); // (false && true) -> false

                /* OR operator */
                console.log(a < 15 || b > 10); // (true || true) -> true
                console.log(a > 15 || b > 10); // (false || true) -> true

                /* NOT operator */
                console.log(!(a < 15)); // !(true) -> false
                console.log(!(a < 15 && b > 10)); // !(true && true) -> !(true) -> false

                /* output
                true
                false
                true
                true
                false
                false
                */

            Mungkin sebagian dari kita bertanya, sebenarnya apa kegunaan dari nilai boolean selain hanya menampilkan nilai true dan false saja? Pada pembahasan tipe data sudah pernah disebutkan bahwa boolean merupakan salah satu kunci dari logika pemrograman, karena boolean dapat mengontrol bagaimana alur program kita akan berjalan.

            Lantas bagaimana cara boolean mengontrol sebuah aliran program? Pada materi selanjutnya, kita akan membahas mengenai if/else statement yang dapat mengontrol flow pada program, tentunya pada penggunaan statement boolean ini sangat berguna.


If/Else Statement
    Setiap hari kita melakukan perhitungan dan perbandingan guna membuat keputusan, apa pun itu. Contohnya, apakah perlu mencuci kendaraan ketika cuaca sedang cerah? Apa saja transportasi online yang bisa dipesan ketika hujan untuk sampai di tempat tujuan?

    Ketika mengembangkan sebuah program, kita akan bertemu dengan alur bercabang tergantung pada kondisi yang terjadi. Untuk mengakomodasi dan mengecek sebuah kondisi dalam JavaScript, kita menggunakan kata kunci if.

    Statement if akan menguji suatu kondisi. Jika kondisi bernilai true, maka blok kode di dalamnya akan dijalankan. Sebaliknya, jika bernilai false, maka proses yang ditentukan akan dilewatkan.

        const isRaining = true;

        console.log("Persiapan sebelum berangkat kegiatan.");
        if (isRaining) {
            console.log("Hari ini hujan. Bawa payung.");
        }
        console.log("Berangkat kegiatan.");

        /* output:
        Persiapan sebelum berangkat kegiatan.
        Hari ini hujan. Bawa payung.
        Berangkat kegiatan.
         */

    Jika Anda mengubah nilai isRaining menjadi false, maka kode di dalam blok kode if akan dilewatkan. Sehingga program Anda tidak akan mengingatkan untuk membawa payung.

    Lalu bagaimana jika Anda ingin melakukan operasi lain ketika kondisi bernilai false? Jawabannya adalah statement else. Pada contoh kode berikut kita akan melakukan pengecekan kondisi menggunakan operator perbandingan.

        let x = 50;

        if(x > 70) {
        console.log(x);
        } else {
        console.log("Nilai kurang dari 70");
        }

        /* output
        Nilai kurang dari 70
        */

    Terdapat variabel x dengan nilai 50, kemudian kita bertanya, “Hai JavaScript! Apakah x lebih dari 70?” Jika kondisi tersebut benar, maka kita dapat memerintahkan JavaScript untuk menampilkan nilainya. Jika salah, kita perintahkan JavaScript untuk menampilkan teks “Nilai kurang dari 70”.

    Kita juga bisa mengecek beberapa kondisi sekaligus dengan menggabungkan else dan if. Contohnya adalah seperti program berikut:

        let language = "French";
        let greeting = "Selamat Pagi"

        if(language === "English") {
        greeting = "Good Morning!";
        } else if(language === "French") {
        greeting = "Bonjour!"
        } else if(language === "Japanese") {
        greeting = "Ohayou Gozaimasu!"
        }

        console.log(greeting);

        /* output
        Bonjour!
        */

    Pengecekan kondisi akan dilakukan dari statement if paling awal. Sehingga, ketika nilai language adalah “French”, maka pengecekan untuk language === “Japanese” tidak akan dilakukan.

    Selain if statement di atas, JavaScript juga mendukung ternary operator atau conditional expressions. Dengan ini, kita bisa menuliskan if-else statement hanya dalam satu baris.

        // condition ? true expression : false expression

        const isMember = false;
        const discount = isMember ? 0.1 : 0;
        console.log("Anda mendapatkan diskon sebesar " + discount * 100 + "%");

        /* output
        Anda mendapatkan diskon sebesar 0%
        */

    Ternary operator membutuhkan tiga operand. Sebelum tanda tanya (?) berisi kondisi yang ingin kita evaluasi. Kemudian diikuti dengan expression apabila nilai kondisinya benar sebelum tanda titik dua. Terakhir adalah expression yang dieksekusi ketika kondisinya salah. Karena merupakan conditional expression, maka operand kedua dan ketiga harus mengembalikan nilai.


Truthy & Falsy
    Di dalam if statement kita perlu memasukkan expression yang akan dievaluasi. Umumnya, expression tersebut mengembalikan nilai boolean untuk menentukan kondisi true atau false. Lalu bagaimana jika kita menuliskan expression yang tidak mengembalikan nilai boolean? Jawabannya bisa.

    Setiap nilai pada JavaScript pada dasarnya juga mewarisi sifat boolean. Nilai ini dikenal dengan truthy atau falsy. Nilai truthy berarti nilai yang ketika dievaluasi akan menghasilkan nilai true, begitu pula falsy bernilai false. Jadi manakah yang termasuk truthy dan falsy? Selain nilai boolean false, tipe data atau nilai yang dianggap falsy, antara lain:

        Number 0
        BigInt 0n
        String kosong seperti “” atau ‘’
        null
        undefined
        NaN, atau Not a Number

    Selain contoh di atas maka nilainya adalah truthy dan ketika dievaluasi ke dalam if statement akan bernilai true. Berikut ini contohnya dalam kode:

        let name = "";

        if (name) {
        console.log("Halo, " + name);
        } else {
        console.log("Nama masih kosong");
        }

        /* output:
        Nama masih kosong
        */


Switch Case Statement
    Sebelumnya kita telah mempelajari bagaimana percabangan logika menggunakan if statement. Selain if, JavaScript juga mendukung switch statement untuk melakukan pengecekan banyak kondisi dengan lebih mudah dan ringkas.

        switch (expression) {
        case value1:
            // do something
            break;
        case value2:
            // do something
            break;
        ...
        ...
        default:
            // do something else
        }

    Tanda kurung setelah keyword switch berisi variabel atau expression yang akan dievaluasi. Kemudian untuk setiap kondisi yang mungkin terjadi, kita masukkan keyword case diikuti dengan nilai yang valid. Jika kondisi pada case sama dengan variabel pada switch, maka blok kode setelah titik dua (:) akan dijalankan. Keyword break digunakan untuk keluar dari proses switch. Terdapat satu case bernama default yang memiliki fungsi yang sama dengan keyword else pada control flow if-else. Jika tidak ada nilai yang sama dengan variabel pada switch, maka blok kode ini akan dijalankan.

    Berikut ini adalah contoh kode dari materi if-else yang dikonversi menjadi statement switch:

        let language = "French";
        let greeting = null;

        switch (language) {
            case "English":
                greeting = "Good Morning!";
                break;
            case "French":
                greeting = "Bonjour!";
                break;
            case "Japanese":
                greeting = "Ohayou Gozaimasu!";
                break;
            default:
                greeting = "Selamat Pagi!";
        }

        console.log(greeting);

        /* output
        Bonjour!
        */