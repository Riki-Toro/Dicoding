Pengenalan Web Storage
    Selamat datang di modul Web Storage! Pada modul sebelumnya kita telah mempelajari, menggunakan, serta mengimplementasikan object browser model, document object model, dan event. Melalui ketiga hal tersebut, kita bisa membuat tampilan halaman web menjadi lebih dinamis mengikuti interaksi dari user. Walau begitu, bagaimana jika kita ingin menyimpan data, seperti input dari user yang dapat diakses oleh kode JavaScript ketika diperlukan?

    Jika ingin menerapkan fitur penyimpanan data, kebanyakan dari kita langsung tertuju pada satu istilah bernama database. Untungnya, kita tidak perlu membuat database sendiri, melainkan sudah didukung oleh browser untuk menyimpan data di "lokasi" khusus yang merupakan fitur bawaan dari browser. Fitur bawaan yang dimaksud adalah web storage.

    Kita akan menyelami fungsi web storage lebih dalam serta mengimplementasikannya pada sebuah halaman web. Sehingga, di akhir modul ini diharapkan Anda dapat:

        Mengetahui apa itu web storage.
        Mengetahui fungsi dari web storage.
        Mengetahui macam-macam web storage, yakni local storage, dan session storage serta cara penggunaannya.
        Mengetahui bagaimana menambahkan, memodifikasi, dan menghapus data ke web storage.
        Mengetahui cara menyimpan data dengan struktur kompleks ke dalam web storage, seperti JSON.

    Supaya proses belajar menjadi lebih interaktif, apabila Anda memiliki pertanyaan perihal materi disajikan, jangan segan untuk bertanya via forum diskusi. Mentor kami akan sigap menjawab pertanyaan. Anda juga dipersilakan untuk membantu menjawab pertanyaan yang diajukan oleh peserta belajar lainnya.




Pengertian dan Fungsi Web Storage
    Apa itu web storage? Web storage adalah salah satu Web API (perantara agar kode JavaScript bisa "berkomunikasi" dengan browser) yang dapat menyimpan data secara lokal pada sisi client (disimpan secara lokal pada perangkat kita). Berbeda dengan objek atau array, data yang disimpan pada objek atau array JavaScript bersifat sementara. Ia akan hilang jika terjadi reload atau pergantian URL pada browser. Sedangkan data yang disimpan pada Web Storage akan bertahan lebih lama karena data tersimpan dalam storage browser.

    Data yang tersimpan dalam web storage tersedia berdasarkan domain. Artinya, data pada suatu domain web hanya dapat diakses oleh domain itu sendiri. Web storage dapat menampung sebesar 10MB untuk satu domain.

    Pada umumnya, kita menganggap jika mengakses sebuah halaman web, data yang dibutuhkan akan dikirim dari database milik server web yang kita akses.

    Tetapi tahukah Anda, bahwa tidak semua data harus diambil terus menerus dari database ketika kita mengakses halaman web tersebut? Jika proses pengambilan data dilakukan terus menerus dari database setiap kali mengakses halaman web, apakah justru malah tidak efisien?

    Karena kita mengunduh data yang sama berulang kali? Di sinilah web storage memiliki kelebihan. Mari simak beberapa contoh kasus di mana web storage lebih cocok digunakan:

        Menyimpan data dalam bentuk string yang dihasilkan oleh sebuah halaman web agar bisa diakses secara offline.
        Menyimpan pengaturan preferensi pribadi untuk sebuah halaman web contohnya seperti tata letak dan tema warna halaman web.

    Bayangkan jika pada skenario-skenario di atas tidak menggunakan web storage. Kita perlu mengunduh secara terus menerus untuk data yang cenderung sama. Boros sekali, bukan? Belum lagi pengaruhnya terhadap lamanya waktu yang dibutuhkan untuk menampilkan web. Terdapat 2 jenis web storage yang tersedia yang akan kita bahas berikutnya!




Macam-Macam Web Storage dan Cara Mengetahui Dukungan Web Storage
    Web storage terbagi menjadi 2 yakni local storage dan session storage. Sebelum menggunakan Web Storage baik sessionStorage atau localStorage, kita perlu memastikan browser support terhadap fitur tersebut, dengan cara menjalankan perintah berikut pada console browser:

        typeof(Storage);

    Output yang dihasilkan semestinya tidak bertuliskan "undefined".

    Seharusnya browser yang ada saat ini sudah mendukung kedua fitur tersebut, seperti Google Chrome dan Mozilla Firefox.

    Data yang tersimpan dalam sessionStorage atau localStorage adalah nilai dengan tipe data primitif seperti number, boolean, atau string. Namun, kita juga dapat menyimpan data berbentuk JavaScript objek dengan mengubahnya ke dalam string (JSON) terlebih dahulu, begitu pula sebaliknya ketika kita ingin menggunakan datanya kembali.

    Metode yang dapat digunakan untuk menyimpan dan mengakses data pada storage adalah key-value. Di sini key menjadi sebuah kunci untuk mengakses data pada storage. Ibarat sebuah loker, jika Anda ingin menyimpan sebuah benda pasti memerlukan kunci unik untuk loker tersebut. Sama halnya jika Anda ingin mengambil kembali barang tersebut, yakni membukanya dengan kunci yang tepat.

    Data yang disimpan pada Web Storage dapat kita lihat menggunakan DevTools pada tabApplication (Google Chrome) atau tabStorage (Mozilla Firefox).




Local Storage
    Tipe storage yang pertama adalah local storage yang digunakan untuk menyimpan data tanpa ada batasan waktu. Data yang disimpan tidak akan hilang bila browser atau tabs browser ditutup kecuali jika kita menghapusnya.

    Untuk menggunakan local storage, kita harus mengaksesnya melalui objek yang bernama "localStorage". Kemudian untuk menyimpan datanya, kita harus menggunakan method setItem() dari objek tersebut.

    Method setItem() membutuhkan 2 parameter, di mana parameter pertama adalah key dan yang kedua adalah value yang ingin kita simpan. Kemudian untuk mengaksesnya kita memerlukan method getItem() yang membutuhkan 1 parameter yaitu nilai key yang kita gunakan untuk menyimpan data. Seperti yang disebutkan sebelumnya, data pada local storage bisa dihapus dengan method removeItem() yang menerima 1 parameter yakni nilai key yang kita gunakan untuk menyimpan sebuah objek.

    Berikut penerapan dari local storage:

        <!DOCTYPE html>
        <html>
            <head>
                <title>Web Storage World</title>
                <style>
                    .contents{
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        border: 1px solid black;
                        border-width:2px;
                        padding : 15px;
                    }
        
        
                    #generateButton{
                        margin-top : 5px;
                        margin-bottom: 15px;;
                    }
                </style>
            </head>
            <body>
                <div class="contents" align="center">
                    <button id="incrementButton">Tambah nilai</button>
                    <button id="clear">Hapus storage</button>
                    <h3>Kamu sudah menekan tombol di atas sebanyak:</h3>
                    <h2 id="count">0</h2>
                </div>
                
                <script>
                const localStorageKey = "PRESS_FREQUENCY";
        
                // pengecekan apakah data localStorage dengan key count tersedia atau belum
                    if (typeof(Storage) !== "undefined") {
                        if (localStorage.getItem(localStorageKey) === null) {
                                // Jika item pada local storage belum ada 
                                // maka akan diberi nilai awal yakni 0
                                localStorage.setItem(localStorageKey, 0);
                            }
                        const Incrementbutton = document.querySelector("#incrementButton");
                        const clearButton = document.querySelector("#clear");
                        const countDisplay = document.querySelector("#count");
                        
                        // memberikan nilai item dari local storage
                        countDisplay.innerText = localStorage.getItem(localStorageKey);
        
                        // mengupdate nilai dari item local storage jika tombol ditekan
                        Incrementbutton.addEventListener('click', function() {
                            let count = localStorage.getItem(localStorageKey);
                            count++;
                            localStorage.setItem(localStorageKey, count);
                            countDisplay.innerText = localStorage.getItem(localStorageKey);
                        })
        
                        // memberikan nilai 0 ke tampilan karena di-reset dan menghapus item
                        clearButton.addEventListener('click', function(){
                            localStorage.removeItem(localStorageKey);
                            countDisplay.innerText = 0;
                        })
                    } else {
                        alert("Browser yang Anda gunakan tidak mendukung Web Storage")
                    }
                </script>
            </body>
        </html>

    Pada gif di atas kita bisa mengetahui bahwa data yang disimpan pada local storage akan bertahan walaupun jendela browser atau tab browser ditutup. Untuk menghapus datanya, tekan tombol "Hapus Storage" di mana tombol tersebut akan memanggil method localStorage.removeItem().