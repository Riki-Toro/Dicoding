Implementasi Web Storage - Menyimpan Data Kompleks pada Storage menggunakan objek JSON
    Sejauh ini kita hanya menggunakan tipe data string untuk menambah, mengakses, memodifikasi serta menghapus item storage. Ada satu tipe data yang bisa kita gunakan untuk menyimpan data lebih kompleks yakni JSON (JavaScript object Notation). Misalnya kita ingin menyimpan data mengenai nama, umur, dan domisili seseorang. Jika kita pertimbangkan, solusi paling baik adalah menggunakan JSON. Hal tersebut dikarenakan data nama, umur, dan domisili lebih mudah diakses, diolah, dan kodenya lebih mudah dipahami.

    Untungnya session storage dan local storage mendukung penyimpanan data berupa JSON. Walau demikian, untuk kali ini kita hanya akan menggunakan local storage saja. Kita akan membuat sebuah halaman web sederhana yang menyimpan data user yang di-input dan menampilkannya.

    2021042919154319a9c6c870cc0cfd7bd978b87ba0e7c6.gif

    Pertama, mari kita buat sebuah berkas HTML dengan isi sebagai berikut: 

        <!DOCTYPE html>
        <html>
            <head>
                <title>Web Storage JSON</title>
                <style>
        
                    hr{
                        size: 2;
                        height:2px;
                        color:black;
                        background-color:black;
                        width: 95%;
                    }
        
                    table{
                        border-collapse: collapse;
                        border-spacing: 0;
                        width: 100%;
                        border: 1px solid #ddd;
                    }
        
                    .contents{
                        margin-left: 5%;
                        margin-right: 5%;
                    }
        
                    .child-content{
                        border: 1px solid black;
                        border-width:2px;
                        padding-bottom: 2%;
                        margin-bottom: 1%;
                    }
        
                    .form-element{
                        margin:2%;
                    }
        
                    #user-form{
                        width: 50%;
                        height: 40%;
                    }
        
                    #user-list{
                        margin-top: 1%;
                        width: 55%;
                    }
        
                    #instructions-list{
                        margin-left: 1%;
                        margin-right: 1%;
                    }
                </style>
            </head>
            <body>
                <h1 align="center">Penambahan User Baru</h1>
                <div class="contents"  align="center">
        
                    <div class="child-content" id="user-form">
                        <h2>Form User Data</h2>
                        <hr>
                        <form id="form-data-user">
                            <div class="form-element">
                                <label for="nama">Nama user:</label><br>
                                <input id="nama" type="text" name="nama" placeholder="Nama user" value="" maxlength="10" required ><br>
                            </div>
                            <div class="form-element">
                                <label for="Umur">Umur user:</label><br>
                                <input id="umur" type="text" name="Umur" placeholder="Umur user" value="" maxlength="2" required><br>
                            </div>
                            <div class="form-element">
                                <label for="Domisili">Domisili user:</label><br>
                                <input id="domisili" type="text" name="Domisili" placeholder="Domisili user" value="" maxlength="10" required><br>
                            </div>
                            <div class="form-element">
                                <input id="submitButton" type="submit" value="Submit Data">
                            </div>
                        </form>
                    </div>
        
                    <div class="child-content" id="user-list">
                        <h2>User List</h2>
                        <hr>
                        <table id=user-list-table>
                            <thead>
                                <tr>
                                    <th>Nama</th>
                                    <th>Umur</th>
                                    <th>Domisili</th>
                                </tr>
                            </thead>
                            <tbody id="user-list-detail" align="center"></tbody>
                        </table>
                    </div>
                </div>
                <script>
                    const storageKey = "STORAGE_KEY";
        
                    const submitAction = document.getElementById("form-data-user");
                </script>
            </body>
        </html>

    Dari berkas HTML di atas, kita sudah memiliki tampilan halaman web sebagai berikut:

    202104291917046b35284a0d79e03d647078357f087ec9.png

    Walau tampilannya sudah tampak, isi elemen <script>-nya sedikit dan tidak memiliki pengaruh apa-apa ke tampilan halaman web. Berikutnya kita akan menambahkan beberapa fungsionalitas secara perlahan.


    Fungsionalitas pertama adalah memeriksa apakah fitur web storage didukung oleh browser yang kita gunakan melalui sebuah fungsi bernama checkForStorage():

        function checkForStorage() {
            return typeof(Storage) !== "undefined"
        }

    Fungsi di atas akan mengembalikan nilai true jika fitur web storage didukung oleh browser dan false jika tidak. Berikutnya kita akan menerapkan sebuah fungsi bernama putUserList(). Fungsi ini berguna untuk membuat item storage, membuat nilai awalnya serta untuk memodifikasi nilai pada item storage-nya juga:

        function putUserList(data){
            if(checkForStorage()){
                let userData = [];
                if (localStorage.getItem(storageKey) === null) {
                    userData = [];
                } else {
                    userData = JSON.parse(localStorage.getItem(storageKey));
                }     
                userData.unshift(data); 
                if (userData.length > 5) {
                    userData.pop();
                }
                localStorage.setItem(storageKey, JSON.stringify(userData));   
            }
        }
        
    Fungsi di atas akan memeriksa apakah fitur web storage sudah didukung melalui fungsi checkForStorage(). Jika iya, kita akan membuat sebuah variabel bernama userData yang akan menampung semua data pada item storage. Jika item storage yang digunakan belum dibuat, kita akan memberikan nilai array kosong ke variabel userData. Jika tidak, kita akan mengambil data yang disimpan dan memasukkannya ke fungsi JSON.parse().

    Apa kegunaan dari fungsi JSON.parse? Fungsi tersebut berguna untuk mengonversi sebuah JSON yang ditulis dalam bentuk string ke bentuk JSON "asli". Masih ingat materi "Memodifikasi Item Storage" bahwa data apa pun yang disimpan ke web storage akan menjadi bentuk string? Nah, untuk mengubah sebuah JSON yang ditulis dalam bentuk string ke bentuk JSON "asli", gunakan fungsi JSON.parse().

    Kode userData.unshift(data) akan memasukkan nilai yang disimpan di parameter data di elemen paling depan array yang tersimpan di variabel userData. Kode di dalam kondisi if terakhir (userData.length > 5) berfungsi untuk menghilangkan data pada elemen paling terakhir jika panjang userData melebihi 5. 

    Hal ini dilakukan untuk memunculkan 5 data dari user yang paling baru agar tampilan halaman web tetap rapi. Baris terakhir adalah menyimpan data tersebut ke dalam local storage melalui method setItem(). Sebelum disimpan, kita harus mengubah array yang berisi data-data JSON ke dalam bentuk string terlebih dahulu. Hal ini bisa kita capai melalui fungsi JSON.stringify().


    Fungsi berikutnya yang akan kita tulis adalah getUserList() yang berguna untuk mendapatkan semua data pada item storage yang berisi data user yang sudah di-input.

        function getUserList() {
            if (checkForStorage()) {
                return JSON.parse(localStorage.getItem(storageKey)) || [];
            } else {
                return [];
            }
        }

    Fungsi ini mengembalikan nilai array dari localStorage ketika sudah memiliki nilai sebelumnya melalui JSON.parse(). Namun, jika item storage yang kita ambil masih kosong, fungsi ini akan mengembalikan nilai array kosong.

    Berikutnya kita akan menambahkan fungsi untuk merender data user pada tabel HTML. Fungsi ini bernama renderUserList().

        function renderUserList() {
            const userData = getUserList();
            const userList = document.querySelector("#user-list-detail");
            
            userList.innerHTML = "";
        
            for (let user of userData) {
                let row = document.createElement('tr');
                row.innerHTML = "<td>" + user.nama + "</td>";
                row.innerHTML += "<td>" + user.umur + "</td>";
                row.innerHTML += "<td>" + user.domisili + "</td>";
        
                userList.appendChild(row);
            }
        }

    Kemudian kita akan menambahkan event listener ke tombol submit untuk mengambil semua data yang sudah di-input ke semua field di form. Lalu kita akan menyimpannya pada item storage melalui fungsi putUserList(). Selanjutnya daftar user yang baru saja kita masukkan akan langsung ditampilkan melalui fungsi renderUserList().

        submitAction.addEventListener("submit", function(event){
            const inputNama = document.getElementById("nama").value;
            const inputUmur = document.getElementById("umur").value;
            const inputDomisili = document.getElementById("domisili").value;
            const newUserData = {
                nama: inputNama,
                umur: inputUmur,
                domisili: inputDomisili,
            }
            putUserList(newUserData);
            renderUserList();
        });

    Terakhir, kita akan menambahkan event listener ke objek window untuk event "load". Event handler-nya akan berisi perintah untuk menampilkan semua data yang sudah kita input ke dalam item storage.

        window.addEventListener("load", function(){
            if (checkForStorage) {
                if (localStorage.getItem(storageKey) !== null){
                        const userData = getUserList();
                        renderUserList(userData);
                    }
            }else{
                alert("Browser yang Anda gunakan tidak mendukung Web Storage")
            }
        });

    Sekarang kita lihat kembali isi elemen <script> setelah menambahkan kode-kode di atas:

        <script>
        const storageKey = "STORAGE_KEY";
        
        const submitAction = document.getElementById("form-data-user");
        
        function checkForStorage() {
            return typeof(Storage) !== "undefined"
        }
        
        function putUserList(data){
            if(checkForStorage()){
                let userData = [];
                if (localStorage.getItem(storageKey) === null) {
                    userData = [];
                } else {
                    userData = JSON.parse(localStorage.getItem(storageKey));
                }     
                userData.unshift(data); 
                if (userData.length > 5) {
                    userData.pop();
                }
                localStorage.setItem(storageKey, JSON.stringify(userData));   
            }
        }
        
        function getUserList() {
            if (checkForStorage()) {
                return JSON.parse(localStorage.getItem(storageKey)) || [];
            } else {
                return [];
            }
        }
        
        function renderUserList() {
            const userData = getUserList();
            const userList = document.querySelector("#user-list-detail");
            
            userList.innerHTML = "";
        
            for (let user of userData) {
                let row = document.createElement('tr');
                row.innerHTML = "<td>" + user.nama + "</td>";
                row.innerHTML += "<td>" + user.umur + "</td>";
                row.innerHTML += "<td>" + user.domisili + "</td>";
        
                userList.appendChild(row);
            }
        }
        
        submitAction.addEventListener("submit", function(event){
            const inputNama = document.getElementById("nama").value;
            const inputUmur = document.getElementById("umur").value;
            const inputDomisili = document.getElementById("domisili").value;
            const newUserData = {
                nama: inputNama,
                umur: inputUmur,
                domisili: inputDomisili,
            }
            putUserList(newUserData);
            renderUserList();
        });
        
        window.addEventListener("load", function(){
            if (checkForStorage) {
                if (localStorage.getItem(storageKey) !== null){
                        const userData = getUserList();
                        renderUserList(userData);
                    }
            }else{
                alert("Browser yang Anda gunakan tidak mendukung Web Storage")
            }
        });
        </script>
        
    Jalankan kembali halaman web, maka semua fungsionalitas sudah lengkap. Sehingga, saat ini kita sudah bisa menyimpan, mengakses, serta memodifikasi data pada item storage melalui JSON.

    20210429192545dd25bc1df7ace15e476aa99a642298d4.gif
