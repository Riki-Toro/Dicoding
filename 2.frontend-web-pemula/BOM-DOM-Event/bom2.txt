Browser Environment
    Selama belajar materi JavaScript yang dibahas di dalam kelas ini, apakah Anda menyadari semua kode JavaScript berjalan di perangkat browser dan tidak pada perangkat lainnya? Mengapa demikian? Karena kita menggunakan runtime environment milik browser alias semua kode JavaScript dijalankan di atas platform browser.

    Pada awalnya Bahasa Pemrograman JavaScript didesain untuk berjalan di browser. Namun, seiring berjalannya waktu, kini banyak platform yang dapat menjalankan JavaScript di luar browser. Platform tersebut menggunakan runtime environment lain seperti Node JS. Salah satu contohnya adalah ketika kita menjalankan kode JavaScript pada glot.io. 

    Walaupun JavaScript dapat berjalan di luar browser, kita perlu tahu bahwa JavaScript yang berjalan di browser memiliki fungsionalitas khusus yang tidak bisa ditemukan di tempat lain. Hal tersebut karena ia dijalankan di dalam browser environment.

    Apa istimewanya browser environment ini? Istimewanya terletak pada "peralatan-peralatan" khusus yang dapat digunakan oleh kode JavaScript untuk berinteraksi dengan browser maupun dengan dokumen HTML yang kita buat. Masih ingat dengan istilah Browser Object Model (BOM) dan Document Object Model (DOM)? Keduanya secara khusus hanya tersedia untuk JavaScript yang dijalankan dalam browser environment.

    Pada gambar di bawah ini, kita melihat representasi dari objek window yang hanya bisa diakses oleh JavaScript dalam browser environment. Dengan melalui objek window, kita bisa mengakses DOM serta BOM.

    Sehingga, jika kita menjalankan kode JavaScript yang berjalan di luar browser environment, maka object browser dan document object tidak akan tersedia dan menyebabkan error. Contohnya method alert() dari JavaScript dapat dijalankan pada browser seperti berikut.

    Namun, jika menggunakan glot.io, ia akan menghasilkan error karena pada situs tersebut, kode JavaScript dijalankan di environment Node JS yang tidak menyediakan browser object model maupun document object model:

    Keren bukan fungsionalitas tersebut? Dalam pemrograman front-end kita akan sering bergulat dengan browser object model serta document object model untuk mempercantik tampilan website. Sudah siap untuk mengetahui lebih lanjut tentang keduanya?


Pendahuluan Browser Object Model (BOM)
    Setiap browser menyediakan apa yang disebut browser object model (BOM) yang bisa kita gunakan dalam kode JavaScript kita. Dalam browser, object browser model ini diwakilkan oleh sebuah objek bernama window. Mari kita ketik window pada console browser dan lihat method dan method apa saja yang tersedia melalui objek ini:

    Melalui objek window inilah kode JavaScript kita bisa mengakses berbagai method dan atribut yang bisa membantu kita membuat halaman web menjadi lebih interaktif. Kemungkinan Anda akan tertegun melihat begitu banyak method serta atribut, tetapi Anda tidak diharapkan untuk menghafal semuanya. Karena pada materi berikutnya, kita cukup membahas 3 method paling dasar yakni method alert(), prompt(), dan objek console.


Anggota BOM
    Pada sub-modul ini kita akan membahas lebih dalam method dari masing-masing ketiga anggota BOM di atas. Ketiga anggota BOM (Browser Object Model) adalah method alert(), method prompt(), dan diakhiri dengan objek console. Mari mulai membahas method alert terlebih dahulu!

    method alert()
        method alert(), seperti method pada JavaScript menerima 1 parameter opsional yakni sebuah pesan string yang ingin kita tampilkan dalam sebuah dialog box oleh browser. Contohnya jika kita ingin menampilkan sebuah pesan berisi string "Halo user!" menggunakan console, maka caranya adalah sebagai berikut:

            alert("Halo user!");

        Sehingga tampilannya akan terlihat seperti di bawah ini:

        Sama seperti memanggil method pada umumnya pada JavaScript, bukan? Kita bahkan hanya perlu memasukkan variabel yang berisi string ke dalam method alert() sebagai berikut:

            let pesan = "Halo user!";
            alert(pesan);
            
        Maka jika dijalankan pada console browser menjadi sebagai berikut:

        Keren bukan? Kita bisa menampilkan pesan yang telah ditentukan melalui JavaScript. Namun, ada satu hal yang perlu kita ingat saat menggunakan alert(), yakni ketika dialog boxalert() muncul, user tidak bisa berinteraksi dengan bagian lain dari halaman web sampai dialog box tersebut ditutup dengan menekan tombol "OK".


Anggota BOM: prompt()
    Kita telah mengenal cara untuk memunculkan dialog box dengan sebuah pesan yang sudah ditentukan sendiri. Sekarang kita akan mempelajari cara menggunakan sebuah method untuk menampilkan dialog box yang bisa juga menangkap input dari user, method tersebut adalah prompt(). Method ini berguna jika kita memerlukan input dari user melalui sebuah dialog box. Karena method ini bisa menangkap input dari user, maka terdapat lebih banyak fungsionalitas ketimbang method alert() untuk memenuhi kebutuhan tersebut. Yuk, kita bahas satu-satu:

    Nilai return dari method prompt()
        Tidak seperti method alert() yang tidak mengembalikan (alias return) nilai (undefined), method prompt()  akan mengembalikan sebuah nilai sesuai dengan input dari user. Nilai tersebut harus disimpan pada sebuah variabel jika kita ingin menggunakannya kembali. Contohnya coba jalankan kode berikut pada console browser:

            let pesanInput = prompt("Masukkan pesan sesukamu...")

        Lalu, coba kita tampilkan isi dari variabel pesanInput, maka hasilnya pasti akan sesuai dengan pesan yang kita input pada dialog box.

        Kita bisa melihat bahwa sekarang nilai yang tersimpan di variabel pesanInput sesuai dengan input yang diberikan, yakni "Aku suka belajar koding!". Jika user tidak mengisi apa pun dan tetap menekan tombol "OK", maka nilai yang diberikan ke variabel pesanInput hanya berisi string kosong.

        Pada contoh di atas, kita telah menekan tombol "OK", tetapi apa yang terjadi jika kita menekan tombol "Cancel"? Jika kita menekan tombol "Cancel", justru nilai yang dikembalikan adalah null. Silahkan coba kembali contoh di atas tetapi kali ini tekan tombol "Cancel", nanti nilai dari variabel pesanInput akan bernilai null.

        Ada satu hal yang perlu kita ingat selama menggunakan method prompt(), yakni nilai apa pun yang diketik oleh user pada input akan diproses menjadi string terlebih dahulu baru dijadikan nilai kembalian (alias return) dari method tersebut. Coba kita jalankan contoh kode berikut pada console:

            let pesanInput = prompt("Silakan masukkan angka...");

        Ketika kita menampilkan tipe data dari nilai milik variabel pesanInput, maka sudah pasti tipe datanya adalah string, walau yang kita masukkan berupa angka.

        Hal ini perlu kita ingat baik-baik karena jika kode tidak menduga bahwa variabel pesanInput berupa string, maka bisa saja menimbulkan bug yang tidak terduga pula. Jadi harap lebih teliti, ya. Walau begitu, kita bisa cast input dari method prompt ke tipe data tertentu. Misalkan pada contoh di atas kita ubah kode baris pertama menjadi:

            let pesanInput = Number(prompt("Masukkan pesan sesukamu..."));

        Kemudian periksa tipe data dari variabel pesanInput, pasti tipe datanya berupa number.

    Memberikan nilai balikan default pada method prompt()
        Ada satu lagi parameter yang bisa kita masukkan ke method prompt, di mana parameter ini berguna untuk mengisi field input secara otomatis dengan nilai yang berada pada parameter kedua tersebut. Mari kita coba dengan kode berikut:

            let nama = prompt("Silakan masukkan nama Anda", "Lorem Ipsum");

        Ketika kita jalankan pada browser, maka field input yang muncul pada dialog box akan secara otomatis terpenuhi.

        Sama halnya dengan method alert(), ketika dialog box dari method prompt() terbuka, maka kita tidak bisa berinteraksi dengan komponen lain pada halaman web sampai dialog box tersebut ditutup.


Anggota BOM: console
    Akhirnya kita sampai pada pembahasan objek console yang merupakan peralatan yang wajib diketahui oleh semua front-end developer yang menggunakan JavaScript. Mengapa demikian? Karena objek console memberikan kita akses ke fitur debugging alias peralatan-peralatan yang bisa membantu menghilangkan bug yang bersembunyi di dalam kode JavaScript.

    Tentu Anda masih ingat jika ingin menampilkan sebuah nilai dari variabel maupun sebuah string, dapat menggunakan sintaks "console.log(<isi pesan>)". Wah, ternyata kita sudah menggunakan objek console sejak awal! Melalui objek console ini, kita dapat membuat kode JavaScript menampilkan pesan-pesan khusus berdasarkan konteks tertentu pada console milik browser. Berikut beberapa method milik objek console yang umum digunakan:

        log() Menampilkan pesan ke console browser.
        info() Menampilkan pesan yang berisi informasi penting ke console browser.
        warn() Menampilkan pesan yang berisi informasi dalam bentuk peringatan ke console browser.
        error() Menampilkan pesan yang berisi informasi dalam bentuk error ke console browser.


Cara Memanggil Anggota BOM
    Sebelum kita lanjut ke materi berikutnya ada baiknya kita membahas hal ini terlebih dahulu. Ketika kalian ingat akan peraturan sintaks JavaScript, bukankah memanggil properti atau sebuah method milik sebuah objek harus menggunakan sintaks "<nama objek>.<nama properti>"? Hal ini benar dan juga berlaku untuk object browser yang diwakilkan oleh sebuah objek yang bernama window pada environment browser. Maksudnya, kita dapat memanggil method alert() dengan sintaks berikut:

        // cara pertama
        window.alert("Hello World");
 
        // cara kedua
        alert("Hello World");

    Kedua cara di atas sama-sama valid untuk memanggil method alert(), di mana cara pertama secara eksplisit memerintah kode JavaScript untuk memanggil method alert() milik objek window. Lalu, mengapa cara kedua tetap bisa dilakukan? Karena properti serta method dari objek window bersifat global.

    Walau cara kedua terkesan lebih singkat, kita harus tetap hati-hati karena jika pada scope sebuah berkas .js terdapat fungsi buatan kita yang bernama alert(), maka cara kedua justru akan memanggil fungsi buatan kita tersebut, bukan milik objek window. Contohnya sebagai berikut:

        function alert(nama){
            console.log("Hati-hati, "+nama);
        }
        
        alert("Chewbacca");
        // tulisan ‘Hati-hati, Chewbacca’ akan tercetak ke konsol browser
        
        window.alert("Chewbacca");
        // fungsi alert() yang ditulis di atas tetap terpanggil

    Jadi harap hati-hati ya teman-teman jika kita menamakan sebuah method yang sama dengan method milik objek window, karena bisa jadi halaman web kita akan berperilaku tidak terduga.