Menambahkan Event Handler - Menerapkan event handler dengan addEventListener()
    Pertama, isilah berkas event.html dengan kode sebagai berikut:

        <!DOCTYPE html>
        <html>
            <head>
                <title>Event World</title>
                <style>
                    .contents{
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        border: 1px solid black;
                        border-width:2px;
                        padding : 15px;
                    }
        
                    #generateButton{
                        margin-top : 5px;
                        margin-bottom: 15px;;
                    }
                </style>
            </head>
            <body>
                <div class="contents" align="center" hidden>
                    <button id="incrementButton">Tekan Aku :)</button>
                    <h3>Kamu sudah menekan tombol di atas sebanyak <span id="count">0</span></h3>
                </div>
            
                <script>
                    function increment(){
                        document.getElementById("count").innerText++;
                    
                        if (document.getElementById("count").innerText == 7){
                            const hiddenMessage = document.createElement("h4");
                            hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                            const image = document.createElement("img");
                            image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                            const contents = document.querySelector(".contents");
                            contents.appendChild(hiddenMessage).appendChild(image);
                        }
                    }
        
                    function welcome(){
                        alert("Sim salabim muncullah elemen-elemen HTML!")
                        const contents = document.querySelector(".contents");
                        contents.removeAttribute("hidden");
                    }
        
                    // kita akan menulis kode menggunakan addEventListener di sini
                </script>
            </body>
        </html>

    Method addEventListener() menerima beberapa parameter, tetapi yang perlu kita ketahui sementara adalah parameter pertama dan kedua. Parameter pertama harus diisi dengan sebuah string yang mewakili event yang mendorong kode JavaScript untuk menjalankan sebuah fungsi khusus. Fungsi khusus diletakkan pada parameter kedua yang akan dijalankan ketika ada event pada parameter pertama. 

    Ada satu peraturan yang perlu kita ketahui sebelum menggunakan method addEventListener() yaitu nama event yang kita cari tidak menggunakan istilah onload dan onclick. 

    Pada method addEventListener(), nama event diganti dengan ‘versi’ string-nya. Untuk onload, akan diganti dengan ‘load’, sedangkan onclick akan diganti dengan ‘click’. Untuk daftar lengkap event apa saja yang dikenali oleh addEventListener bisa dilihat di sini https://developer.mozilla.org/en-US/docs/Web/Events.

    Okay, kita sudah mengetahui teknis seputar method addEventListener(), berikutnya kita akan sepenuhnya fokus pada praktik. Bagian yang dicetak tebal menandakan kode yang ingin ditambahkan menggunakan addEventListener. 

    Tambahkan kode berikut pada bagian yang dicetak tebal di kode sebelumnya.

        window.addEventListener('load', welcome);
        document.getElementById("incrementButton").addEventListener('click', increment);

    Hal pertama yang mungkin Anda tanyakan adalah mengapa event listener untuk event ’load’ dipasangkan ke window? Karena method addEventListener tidak bekerja pada elemen body milik berkas HTML. Sehingga, script kita saat ini akan berbentuk seperti berikut:

        <script>
            function increment(){
                document.getElementById("count").innerText++;
            
                if (document.getElementById("count").innerText == 7){
                    const hiddenMessage = document.createElement("h4");
                    hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                    const image = document.createElement("img");
                    image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                    const contents = document.querySelector(".contents");
                    contents.appendChild(hiddenMessage).appendChild(image);
                }
            }
        
            function welcome(){
                alert("Sim salabim muncullah elemen-elemen HTML!")
                const contents = document.querySelector(".contents");
                contents.removeAttribute("hidden");
            }
        
            window.addEventListener('load', welcome);
            document.getElementById("incrementButton").addEventListener('click', increment);
        </script>

    Jalankan kembali berkas HTML di atas, ia pasti akan berfungsi normal kembali! Lantas, jika sama dengan inline event handler, apa keuntungan lebih yang ditawarkan method addEventListener? Kelebihannya adalah kita bisa menambahkan 1 atau lebih fungsi sebagai event handler. Fitur itulah yang tidak dapat dilakukan oleh event handler inline.

        <script>
            // contoh penerapan
            element.onclick = fungsiA;
            element.onclick = fungsiB;
        </script>

    Kode di atas akan overwrite alias menimpa fungsiA dengan fungsiB. Sehingga, jika elemen di-klik, hanya fungsiB saja yang dijalankan. Bagaimana cara kita menemukan solusi agar fungsiA dan fungsiB dijalankan ketika elemen di-klik? Gunakanlah method addEventListener()!

        <script>
            // contoh penerapan
            element.onclick = fungsiA;
            element.onclick = fungsiB;
        </script>

    Selain mampu menambahkan event listener yang banyak dalam satu event, kita juga akan mengetahui penerapan method addEventListener() lebih tepat untuk skenario-skenario tertentu ketimbang menggunakan event handler yang dicontohkan di atas. Method addEventListener() juga mendukung fitur “event bubbling dan capturing” yang memiliki materinya sendiri nanti.




Menambahkan Custom Event
    Apa yang dimaksud dengan Custom Event? Custom Event pada materi ini merujuk kepada penggunaan class Event() untuk membuat event dengan nama yang sudah kita tentukan sendiri. Misal, sebelumnya kita telah menggunakan nama-nama event yang sudah “dikenal” oleh JavaScript yakni seperti “click” dan “load’. Apakah mungkin jika membuat sebuah event dengan nama “eventBuatanKita”’ ? Jawabannya, sangat mungkin! Kita lihat sintaks dari awal pembuatan event sampai memanggilnya melalui addEventListener:

        // membuat custom event
        Const eventBuatan = new Event("eventBuatanKita");
        
        // meletakkannya pada sebuah method addEventListener()
        element.addEventListener("eventBuatanKita"); 

    Kemungkinan Anda bertanya-tanya, “Kenapa kita harus mempelajari custom event?” Karena tidak seperti event yang biasanya “dikenali” oleh method addEventListener’, custom event memungkinkan kita untuk menjalankan sebuah event handler setelah sebuah event handler lain selesai dipanggil.

    Daripada kita berlama-lama, mari kita langsung praktikkan. Pertama buatlah sebuah berkas html dengan isi sebagai berikut:

        <!DOCTYPE html>
        <html>
            <head>
                <title>Event World</title>
                <style>
                    .buttons{
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        border: 1px solid black;
                        border-width:2px;
                        padding : 15px;
                    }
                    .button{
                        margin : 8px;
                        height : 40px;
                    }
                </style>
            </head>
            <body>
                <div class="buttons" align="center">
                    <h3 id="caption">Silakan tekan salah satu tombol di bawah...</h3>
                    <button class="button" id="tombol">Tombol Custom Event</button>
                </div>
                
                <script>
                    // tulis kode kamu di sini
                </script>
            </body>
        </html>

    Tulisan yang telah dicetak tebal merupakan letak penulisan kode kita nantinya. Simpan berkas tersebut dengan nama “custom-event.html”. Kode tersebut akan kita gunakan pada praktik kali ini.

    Pada awal isi dari tag <script>, inisialisasi sebuah custom event yang bernama “changeCaption” dan simpan pada variabel yang memiliki nama yang sama seperti berikut:

        const changeCaption = new Event("changeCaption");

    Kemudian tambahkan sebuah event listener untuk custom event dan event listener pada button melalui method addEventListener() ketika tombol tersebut ditekan.

        window.addEventListener('load', function (){
            const tombol = document.getElementById("tombol");
            tombol.addEventListener("changeCaption", customEventHandler);
            tombol.addEventListener("click", function(){
                });
        });

    Pada tahap terakhir kita akan menulis sebuah fungsi bernama customEventHandler yang dijalankan ketika event changeCaption terjadi.

        function customEventHandler(ev){
            console.log("Event "+ev.type+" telah dijalankan");
            const caption = document.getElementById("caption");
            caption.innerText = "Anda telah membangkitkan custom event";
        }
        
    Fungsi dari customEventHandler memiliki 1 parameter yang bernama “ev”. Apa itu “ev”? Parameter “ev” akan secara otomatis diisi dengan atribut serta method dari sebuah event (penamaan “ev” di atas tidak mutlak, sehingga kita diperbolehkan mengubah namanya menjadi “event”). Semua ini akan dilakukan secara otomatis oleh JavaScript.

    Sehingga, tampilan kode di dalam tag <script> akan seperti ini.

        <script>
        const changeCaption = new Event("changeCaption");
        
        window.addEventListener('load', function (){
            const tombol = document.getElementById("tombol");
            tombol.addEventListener("changeCaption", customEventHandler);
            tombol.addEventListener("click", function(){
                tombol.dispatchEvent(changeCaption);
            });
        });
        
        function customEventHandler(ev){
            console.log("Event "+ev.type+" telah dijalankan");
            const caption = document.getElementById("caption");
            caption.innerText = "Anda telah membangkitkan custom event";
        }
        </script>

    Tampilan web ketika dijalankan akan terlihat seperti di bawah ini:

    Sederhana, bukan? Walaupun kita sudah menerapkan custom event, mengapa tidak menghasilkan perubahan apa pun ketika tombol ditekan? Jawabannya adalah kita belum membuat fungsi untuk eventHandler pada event “click” pada tombol tersebut. Mari lengkapi kode kita pada materi berikutnya!


    Best practice untuk custom event
        Ketika Anda mempelajari adanya sebuah fitur yang dinamakan custome event. Mungkin saja kita secara bebas membuat event di manapun dengan nama yang sudah kita tentukan secara sembarangan! Sebelum Anda melakukan hal tersebut, di sini kita akan membahas mengapa hal seperti itu tidak bagus untuk dijadikan kebiasaan. Hal tersebut akan berpotensi menyebabkan bug dan penyelesaiannya akan semakin sulit seiring semakin kompleksnya program kita.

        Untuk mencatat custom event apa saja yang telah dibuat, sebaiknya buatlah sebuah variabel konstanta yang menyimpan semua nama custom event. Hal tersebut dilakukan supaya tidak ada kejadian yang tidak diinginkan. Kejadiannya yang dimaksud seperti overwrite custom event dan memberitahu ke sesama programmer tentang adanya daftar custom event yang sudah dibuat dan disetujui bersama.




Membangkitkan Custom Event
    Selamat datang ke bagian di mana kita akan membangkitkan custom event yang sudah dibuat pada materi sebelumnya. Dalam praktek materi ini, kita tidak perlu menambahkan banyak kode, melainkan hanya sebuah fungsi yang berisi proses dispatch atau pemanggilan custom event handler. Sebelum lanjut, pastikan Anda membuka berkas HTML custom-event.html yang sudah dibuat sebelumnya. Pastikan kembali isinya sama seperti berikut:

        <!DOCTYPE html>
        <html>
        <head>
            <title>Event World</title>
            <style>
            .buttons {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                border: 1px solid black;
                border-width: 2px;
                padding: 15px;
            }
        
            .button {
                margin: 8px;
                height: 40px;
            }
            </style>
        </head>
        <body>
            <div class="buttons" align="center">
            <h3 id="caption">Silakan tekan salah satu tombol di bawah...</h3>
            <button class="button" id="tombol">Tombol Custom Event</button>
            </div>
        
            <script>
            const changeCaption = new Event("changeCaption");
        
            window.addEventListener("load", function () {
                const tombol = document.getElementById("tombol");
                tombol.addEventListener("changeCaption", customEventHandler);
                tombol.addEventListener("click", function () {});
            });
        
            function customEventHandler(ev) {
                console.log("Event " + ev.type + " telah dijalankan");
                const caption = document.getElementById("caption");
                caption.innerText = "Anda telah membangkitkan custom event";
            }
            </script>
        </body>
        </html>

    Sudah sama? Yuk kita tambahkan fungsi dari event handler “click” bernama onclickEventHandler pada bagian akhir tag <script>. Penulisan fungsi tersebut adalah sebagai berikut:

        tombol.addEventListener("click", function(){
            tombol.dispatchEvent(changeCaption);
        });

    Sehingga isi dari kode JavaScript secara keseluruhan menjadi seperti berikut:

        <script>
            const changeCaption = new Event("changeCaption");
        
            window.addEventListener('load', function (){
                const tombol = document.getElementById("tombol");
                tombol.addEventListener("changeCaption", customEventHandler);
                tombol.addEventListener("click", function(){
                    tombol.dispatchEvent(changeCaption);
                });
            });
        
            function customEventHandler(ev){
                console.log("Event "+ev.type+" telah dijalankan");
                const caption = document.getElementById("caption");
                caption.innerText = "Anda telah membangkitkan custom event";
            }
        </script>

    Simpan berkas HTML dan buka kembali. Ketika kita menekan tombol yang tersedia, maka tulisan yang berada di atas tombol akan berubah. Selain itu, console.log juga dijalankan dan muncul log pada console browser.

    Sama halnya dengan event listener pada umumnya, jika tidak menampilkan event melalui elemen lain yang tidak sama dengan elemen yang memiliki event listener, maka customEventHandler pada kode di atas tidak akan berjalan. Misalnya jika kita memanggil fungsi event handler melalui elemen lain, event handler tidak akan memproses event-nya.

    Tidak jauh berbeda dengan menerapkan event yang sudah “dikenal” oleh JavaScript seperti “click” dan “load”, bukan?

    Melalui event, ada fenomena yang harus kita pelajari yang disebut “bubbling” dan “capturing”. Jika tidak diantisipasi, besar kemungkinan terjadi bug pada berkas HTML yang memiliki nested elements alias elemen yang berada di dalam elemen.