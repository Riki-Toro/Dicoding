Menambahkan Event Handler - Menerapkan event handler dengan addEventListener()
    Pertama, isilah berkas event.html dengan kode sebagai berikut:

        <!DOCTYPE html>
        <html>
            <head>
                <title>Event World</title>
                <style>
                    .contents{
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        border: 1px solid black;
                        border-width:2px;
                        padding : 15px;
                    }
        
                    #generateButton{
                        margin-top : 5px;
                        margin-bottom: 15px;;
                    }
                </style>
            </head>
            <body>
                <div class="contents" align="center" hidden>
                    <button id="incrementButton">Tekan Aku :)</button>
                    <h3>Kamu sudah menekan tombol di atas sebanyak <span id="count">0</span></h3>
                </div>
            
                <script>
                    function increment(){
                        document.getElementById("count").innerText++;
                    
                        if (document.getElementById("count").innerText == 7){
                            const hiddenMessage = document.createElement("h4");
                            hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                            const image = document.createElement("img");
                            image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                            const contents = document.querySelector(".contents");
                            contents.appendChild(hiddenMessage).appendChild(image);
                        }
                    }
        
                    function welcome(){
                        alert("Sim salabim muncullah elemen-elemen HTML!")
                        const contents = document.querySelector(".contents");
                        contents.removeAttribute("hidden");
                    }
        
                    // kita akan menulis kode menggunakan addEventListener di sini
                </script>
            </body>
        </html>

    Method addEventListener() menerima beberapa parameter, tetapi yang perlu kita ketahui sementara adalah parameter pertama dan kedua. Parameter pertama harus diisi dengan sebuah string yang mewakili event yang mendorong kode JavaScript untuk menjalankan sebuah fungsi khusus. Fungsi khusus diletakkan pada parameter kedua yang akan dijalankan ketika ada event pada parameter pertama. 

    Ada satu peraturan yang perlu kita ketahui sebelum menggunakan method addEventListener() yaitu nama event yang kita cari tidak menggunakan istilah onload dan onclick. 

    Pada method addEventListener(), nama event diganti dengan ‘versi’ string-nya. Untuk onload, akan diganti dengan ‘load’, sedangkan onclick akan diganti dengan ‘click’. Untuk daftar lengkap event apa saja yang dikenali oleh addEventListener bisa dilihat di sini https://developer.mozilla.org/en-US/docs/Web/Events.

    Okay, kita sudah mengetahui teknis seputar method addEventListener(), berikutnya kita akan sepenuhnya fokus pada praktik. Bagian yang dicetak tebal menandakan kode yang ingin ditambahkan menggunakan addEventListener. 

    Tambahkan kode berikut pada bagian yang dicetak tebal di kode sebelumnya.

        window.addEventListener('load', welcome);
        document.getElementById("incrementButton").addEventListener('click', increment);

    Hal pertama yang mungkin Anda tanyakan adalah mengapa event listener untuk event ’load’ dipasangkan ke window? Karena method addEventListener tidak bekerja pada elemen body milik berkas HTML. Sehingga, script kita saat ini akan berbentuk seperti berikut:

        <script>
            function increment(){
                document.getElementById("count").innerText++;
            
                if (document.getElementById("count").innerText == 7){
                    const hiddenMessage = document.createElement("h4");
                    hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                    const image = document.createElement("img");
                    image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                    const contents = document.querySelector(".contents");
                    contents.appendChild(hiddenMessage).appendChild(image);
                }
            }
        
            function welcome(){
                alert("Sim salabim muncullah elemen-elemen HTML!")
                const contents = document.querySelector(".contents");
                contents.removeAttribute("hidden");
            }
        
            window.addEventListener('load', welcome);
            document.getElementById("incrementButton").addEventListener('click', increment);
        </script>

    Jalankan kembali berkas HTML di atas, ia pasti akan berfungsi normal kembali! Lantas, jika sama dengan inline event handler, apa keuntungan lebih yang ditawarkan method addEventListener? Kelebihannya adalah kita bisa menambahkan 1 atau lebih fungsi sebagai event handler. Fitur itulah yang tidak dapat dilakukan oleh event handler inline.

        <script>
            // contoh penerapan
            element.onclick = fungsiA;
            element.onclick = fungsiB;
        </script>

    Kode di atas akan overwrite alias menimpa fungsiA dengan fungsiB. Sehingga, jika elemen di-klik, hanya fungsiB saja yang dijalankan. Bagaimana cara kita menemukan solusi agar fungsiA dan fungsiB dijalankan ketika elemen di-klik? Gunakanlah method addEventListener()!

        <script>
            // contoh penerapan
            element.onclick = fungsiA;
            element.onclick = fungsiB;
        </script>

    Selain mampu menambahkan event listener yang banyak dalam satu event, kita juga akan mengetahui penerapan method addEventListener() lebih tepat untuk skenario-skenario tertentu ketimbang menggunakan event handler yang dicontohkan di atas. Method addEventListener() juga mendukung fitur “event bubbling dan capturing” yang memiliki materinya sendiri nanti.