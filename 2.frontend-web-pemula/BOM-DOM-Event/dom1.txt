Document Object Model (DOM)
    Sejauh ini kita sudah mempelajari bagaimana cara menggunakan JavaScript untuk memanipulasi browser object melalui objek window. Sehingga, kita bisa membuat browser melakukan hal-hal tertentu sesuai keinginan. Namun, bagaimana jika kita ingin memanipulasi atau mengatur elemen-elemen yang terdapat pada berkas HTML dengan JavaScript? Jawabannya adalah kita bisa! Yakni melalui Document Object Model (yang berikutnya akan lebih sering kita sebut DOM saja).

    Apa sih DOM itu? Pada lingkungan browser, DOM memberikan izin bagi kode JavaScript untuk mengakses dan memanipulasi konten pada dokumen melalui sebuah application programming interface (API) yakni sesuatu yang memungkinkan JavaScript dan dokumen HTML untuk ‘berkomunikasi’. Masih ingat browser object model yang diwakilkan oleh objek window yang bisa kita masukkan ke kode JavaScript? Nah, document object model diwakilkan oleh objek bernama document yang bisa juga kita gunakan dalam kode JavaScript kita.

    Sebelum mempraktekkan penggunaan DOM dalam kode JavaScript, yuk kita pelajari bentuk struktur dari sebuah DOM sehingga bisa digunakan layaknya sebuah objek pada JavaScript.



DOM Tree
    Ketika Anda membaca topik sub-modul ini, kemungkinan akan muncul pertanyaan “Apa hubungannya DOM dengan tree (pohon)?”. Tree yang dimaksud di sini adalah nama dari sebuah struktur data pada komputer yang secara visual mirip seperti sebuah pohon. Struktur data ini disebut tree, karena layaknya pohon terdapat satu batang induk tunggal yang kemudian bercabang menjadi batang-batang lainnya dan bisa saja bercabang kembali. Jika batang tersebut buntu, maka ujungnya terdapat daun (pada struktur data tree, daun disebut sebagai node).

    Pada berkas HTML, batang induk tunggal adalah elemen <html>, sedangkan cabang-cabangnya adalah adalah elemen-elemen yang terdapat di dalamnya. Misalkan kita mempunyai berkas HTML dengan isi berikut:

        <!DOCTYPE html>
        <html>
            <head>
                <title>DOM Tree</title>
            </head>
            <body>
                <h1>Hello Developer Front-End Web!</h1>
                <p>Belajar Membuat Front-End Web untuk Pemula</p>
            </body>
        </html>

    Jika kita buat berkas HTML di atas menjadi dalam bentuk DOM, maka strukturnya akan menjadi sedemikian rupa:

    Pada contoh yang diberikan di atas, DOM memiliki bentuk struktur data tree yang dibuat berdasarkan berkas HTML di atas. Struktur data tree di atas inilah yang akan direpresentasikan dalam bentuk objek bernama document nanti.

    Walaupun struktur dari DOM terbentuk berdasarkan isi dari berkas HTML, tetapi ada beberapa skenario tertentu yang menyebabkan struktur DOM berbeda dengan struktur elemen-elemen dalam berkas HTML. Salah satu skenarionya adalah jika terdapat kesalahan penulisan dalam berkas HTML. Mari kita lihat contohnya seperti berikut:

        <!DOCTYPE html>
        <html>
        Hello World!
        </html>

    Pada berkas HTML di atas, jelas terlihat bahwa tidak ada elemen dengan tag <head> maupun <body> yang mengakibatkan berkas HTML tersebut tidak valid. Walaupun berkas HTML tersebut tidak valid pada bentuk DOM-nya, object structure-nya akan diperbaiki. Bagaimana caranya? Caranya yakni elemen dengan tag <head> maupun <body> akan ditambahkan secara otomatis kemudian teks “Hello, World!” ditempatkan di elemen <body>.



Mencari DOM (Mendapatkan DOM)
    Untuk mengakses sebuah elemen HTML melalui DOM, kita gunakan objek yang bernama document. Objek document berisi semua elemen yang berada pada HTML atau keseluruhan halaman yang terlihat pada jendela browser saat itu. Jika kita coba mengakses nilai dari objek document pada console browser maka tampilannya akan sebagai berikut:

    Cukup dengan objek document, kita dapat mengakses keseluruhan konten pada HTML yang terdapat root element <html>. Sehingga, jika dicermati kembali di dalamnya terdapat elemen lainnya seperti <head> dan <body>.

    Secara sekilas isi dari objek document hanyalah terlihat seperti isi dari sebuah berkas HTML saja. Namun, layaknya sebuah objek JavaScript, objek document memiliki beberapa atribut dan method yang bisa kita gunakan untuk mengakses koleksi elemen maupun elemen tertentu. Misalnya, mendapatkan konten-konten pada elemen dengan tag <head> melalui objek document dengan kode berikut:

        const head = document.head;

    Bagaimana jika kita ingin mendapatkan elemen <body> saja? Caranya hampir sama, yakni dengan kode berikut:

        const body = document.body;

    Kedua atribut yakni head dan body akan mengembalikan elemen yang sama seperti document yakni sebuah objek.

    Bagaimana jika kita ingin lebih spesifik lagi? Misalnya sebuah elemen tunggal? Kita bisa menggunakan method-method yang tersedia oleh objek document. Salah satu method yang bisa kita gunakan adalah getElementById(). Method tersebut berfungsi untuk mendapatkan elemen berdasarkan nilai id-nya. Pada contoh di atas, elemen gambar  memiliki id "gambarUtama". Jika kita ingin mengakses elemen tersebut, caranya sebagai berikut:

        const gambar = document.getElementById("gambarUtama");

    Objek document juga memiliki banyak sekali method yang tersedia, berikut beberapa method yang umum digunakan serta fungsinya:

        getElementById() | document.getElementById("display"); | Mengembalikan elemen yang memiliki nilai id "display".

        getElementsByName() | document.getElementsByName("button"); | Mengembalikan banyak elemen (HTMLCollection) yang memiliki attribute name dengan nilai "button".

        getElementsByClassName() | document.getElementsByClassName("button"); | Mengembalikan banyak elemen (HTMLCollection) yang memiliki attribute class dengan nilai "button".

        getElements ByTagName() | document.getElementsByTagname("div"); | Mengembalikan banyak elemen (HTMLCollection) yang merupakan <div> elemen.

        querySelector() | document.querySelector(".button"); | Mengembalikan elemen pertama yang menerapkan class "button".

        querySelectorAll() | document.querySelectorAll(".button"); | Mengembalikan banyak elemen (HTMLCollection) yang menerapkan class "button".

    Pada method di atas ada yang mengembalikan nilai HTML elemen secara tunggal, ada juga yang mengembalikan banyak elemen dari sebuah berkas HTML yang biasa disebut sebagai HTMLCollection. Karena semua method di atas dimiliki oleh objek document, maka jangan lupa mengawali semua pemanggilan method-method di atas dengan sintaks "document.<nama method>" ya.

    Misalnya kita bisa mendapatkan elemen paling pertama yang menerapkan nilai "button" pada atribut class dengan method querySelector(".button").

    Sedangkan untuk mendapatkan semua elemen yang nilai atribut class-nya "button", gunakan method querySelectorAll(".button"). Method tersebut akan mengembalikan semua elemen yang sesuai dalam bentuk HTMLCollection.

    Ada fakta menarik tentang HTMLCollection, yakni memiliki karakteristik yang mirip dengan array. Contohnya, kita bisa menggunakan atribut length untuk mendapatkan jumlah elemen yang terdapat di dalamnya. Selain itu, kita bisa mengakses nilai individual elemennya menggunakan indexing.

    Karena HTMLCollection memiliki karakteristik yang mirip dengan array, maka kita juga bisa melakukan looping terhadap elemen-elemennya, yakni melalui sintaks looping for of. Berdasarkan contoh di atas, maka implementasinya sebagai berikut:

        for(let item of buttons){
            console.log(item);
        }

    Sesuai dengan nama method tersebut, method querySelector() dan querySelectorAll() membutuhkan query khusus sebagai parameternya. Jika tujuan kita adalah mendapatkan elemen berdasarkan atribut class, maka parameternya harus diawali dengan tanda titik ("."), sedangkan jika berdasarkan atribut id, kita harus mengawali nilai parameternya dengan tanda pagar ("#").

    Cobalah untuk bereksperimen dengan method-method yang sudah dijelaskan sebelumnya untuk mendapatkan elemen sesuai dengan permintaan kita dan carilah perbedaan dari fungsi method-method tersebut.