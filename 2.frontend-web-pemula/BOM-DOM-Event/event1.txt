Pendahuluan Event
    Kita telah mempelajari browser object model (BOM), document object model (DOM), penggunaan BOM untuk membangkitkan fungsionalitas khusus dari browser, dan cara menggunakan DOM untuk memanipulasi atau mengubah konten dari sebuah berkas HTML.

    Lalu, bagaimana JavaScript menjalankan serangkaian perintah jika user berinteraksi dengan salah satu elemen HTML pada halaman web? Misalnya, menampilkan pesan menggunakan method alert ketika user menekan sebuah tombol pada halaman web atau mengubah tampilan halaman web jika user menekan sebuah key khusus pada keyboard?

    Solusinya terdapat pada materi ini, mari berkenalan dengan event!

    Ketika browser selesai menampilkan halaman web, menekan tombol tertentu pada keyboard, atau mungkin meletakkan kursor pada elemen HTML tertentu, itulah yang dinamakan event alias “kejadian”. Hampir apa pun yang berhubungan dengan adanya interaksi dengan berkas HTML bisa kita sebut sebagai event. Lalu, apa fungsinya?

    Melalui JavaScript, kita bisa menulis kode tertentu yang akan dijalankan ketika merasakan sebuah “kejadian” tertentu. Contohnya jika user menekan sebuah tombol, JavaScript (melalui DOM) akan mengubah tampilan halaman web kita seperti mengubah warna pada elemen tertentu, atau bahkan membawa kita ke bagian tertentu pada halaman web tersebut. Ambil contoh elemen button HTML berikut yang akan memunculkan dialog box alert ketika ditekan:

        <button onclick="alert('Halo! Apa Kabar')">Tekan Aku</button>

    Untuk materi Event, kita akan membahas mengenai:

    Macam-macam Event.
        Membuat kode JavaScript untuk menjalankan kode berdasarkan event tertentu.
        Memberikan kemampuan sebuah elemen HTML untuk membuat sebuah event.
        Memberikan kemampuan sebuah elemen HTML untuk bereaksi terhadap event.
        Membuat Custom Event, yakni event yang sudah dimodifikasi sesuai dengan keperluan kita.

    Ketika sudah memahami bagaimana cara menggunakan event dan mengimplementasikannya bersama dengan manipulasi melalui DOM dan BOM, maka dijamin halaman web Anda sangat interaktif dan tidak terkesan “hambar”. Semangat!




Macam-Macam Event
    Walau istilah event terkesan sangat abstrak, kita dapat menggolongkan beberapa event menjadi beberapa kategori berdasarkan sumber dari mana event tersebut terjadi. Contohnya kejadian yang berhubungan dengan kursor mouse, keyboard, kegiatan copy sebuah elemen teks pada berkas HTML, atau bahkan dari ukuran window browser.

    Berikut beberapa pembahasan terhadap kategori umum serta beberapa event-event yang tergolong pada kategori tersebut.


    Window Events
    Window Events adalah kejadian-kejadian yang berasal dari browser alias pada window.

        onload >> Event ini akan terjadi setelah halaman web selesai diunduh dan ditampilkan.

        onpageshow >> Event ini akan terjadi jika halaman web kembali dikunjungi kembali (berbeda dengan onload, karena event onload tidak akan terjadi jika halaman web diambil dari cache).

        onresize >> Event ini akan terjadi jika window browser di-resize oleh user atau oleh hal lainnya.


    Form Events
    Form Events adalah kejadian-kejadian yang berasal dari sebuah elemen HTML dengan tag <form> (kita akan mempraktikkan penggunaan tag <form> pada materi Form Event.)

        onreset >> Event ini akan terjadi ketika user menekan tombol ‘reset’’ pada elemen form.

        onsubmit >> Event ini akan terjadi user menekan tombol ‘submit’’ pada form.

 

    Keyboard Events
    Keyboard Events adalah kejadian-kejadian yang berasal dari ditekan atau dilepasnya tombol pada keyboard.

        onkeydown >> Event ini akan terjadi ketika sebuah tombol pada keyboard ditekan.

        onkeypress >> Event ini terjadi setelah onkeydown, di mana tombol masih dalam keadaan ditekan. Event ini tidak dapat mendeteksi tombol fungsi seperti CTRL, SHIFT, ALT, ESC, BACKSPACE, dan sebagainya.

        onkeyup >> Event ini akan terjadi ketika sebuah tombol pada keyboard dilepas.


    Clipboard Events
    Clipboard Events adalah kejadian-kejadian yang berasal dari proses cut, copy, atau paste sebuah elemen..

        oncopy >> Event ini akan terjadi ketika kita melakukan proses copy.

        oncut >> Event ini akan terjadi ketika kita melakukan proses cut.

        onpaste >> Event ini akan terjadi ketika kita melakukan proses paste.


    Mouse Events
    Mouse Events adalah kejadian-kejadian yang berasal dari kegiatan klik mouse.

        onclick >> Event ini akan terjadi ketika kita menekan elemen tertentu dengan cursor.

        ondblclick >> Event ini akan terjadi ketika kita menekan elemen tertentu dua kali berturut-turut dengan cursor.

        onmouseover >> Event ini akan terjadi cursor kita berada di atas sebuah elemen tertentu.

    Sekian macam-macam event yang umum. Terdapat beberapa event yang akan kita gunakan pada bagian praktik materi event sehingga tidak perlu dihafalkan semuanya sekaligus. Melalui praktik nanti, diharapkan Anda dapat menghafalnya perlahan.




Menambahkan Event Handler - Menyiapkan Halaman Website
    Cukup banyak event yang bisa kita gunakan untuk menambah aspek interaktif dalam halaman web. Walau sangat banyak, kita hanya akan mempraktekkan 2 event saja, yakni event onclick dan onload.

    Sebelum melanjutkan materi, kita harus menyiapkan sebuah berkas HTML dengan konten berikut. Untuk mempermudah proses praktek, mari kita beri nama berkas HTML tersebut dengan “event.html”.

        <!DOCTYPE html>
        <html>
            <head>
                <title>Event World</title>
                <style>
                    .contents{
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        border: 1px solid black;
                        border-width:2px;
                        padding : 15px;
                    }
        
                    #generateButton{
                        margin-top : 5px;
                        margin-bottom: 15px;;
                    }
                </style>
            </head>
            <body>
                <div class="contents" align="center" hidden>
                    <button id="incrementButton">Tekan Aku :)</button>
                    <h3>Kamu sudah menekan tombol di atas sebanyak <span id="count">0</span></h3>
                </div>
            
                <script>
                    // kita akan praktek di sini
                </script>
            </body>
        </html>

    Tampilannya berupa halaman web yang hampa akan konten. Mengapa demikian? Tenang, browser Anda tidak rusak. Tampilannya memang kosong karena class milik <div> memiliki atribut bernama hidden. Kita akan menambahkan event handler, yang merupakan kode JavaScript yang akan dijalankan ketika sebuah event tertentu terjadi yakni event onload dan onclick. Ketika kita sudah mencapai tahap akhir dari praktek di bawah, siap-siap takjub terhadap halaman web yang berperilaku seperti ini:

    Pada materi ini, akan ada perbedaan pada aspek praktik. Jika sebelumnya kita menulis kode JavaScript menggunakan console browser, sekarang kita akan sepenuhnya menggunakan text editor. Maka keluarkan text editor favorit Anda!




Menambahkan Event Handler - Membuat event handler onload
    Oke deh, tugas pertama kita adalah memunculkan semua konten HTML setelah semua baris pada berkas HTML diproses oleh browser di mana event onload akan terjadi. Pada bagian tag <script>, kita akan menulis kode JavaScript yang akan dijalankan ketika event onload terjadi pada elemen body. Kode JavaScript tersebut disebut sebagai event handler dari event onload.

    Bagaimana membuat sebuah event handler untuk elemen tertentu? Tenang, kita akan membahas satu per satu mulai dari membuat sebuah fungsi event handler, sampai “mengaitkan” fungsi tersebut supaya berjalan ketika event onload terjadi pada elemen body dari berkas HTML.

    Cobalah buka berkas HTML dan tambahkan fungsi bernama welcome yang akan menampilkan semua elemen HTML ketika elemen body selesai diproses oleh browser lalu menjalankan event onload. Fungsi tersebut diletakkan di antara tag <script>.

        function welcome(){
            alert("Sim salabim muncullah elemen-elemen HTML!")
            const contents = document.querySelector(".contents");
            contents.removeAttribute("hidden");
        }

    Pada kode di atas, kita akan memunculkan sebuah dialog box alert. Fungsi dari dialog box adalah memberitahu user bahwa elemen HTML yang sebelumnya bersembunyi akan ditampilkan. Caranya adalah dengan menghilangkan atribut hidden dari elemen div yang memiliki class “contents”. Untuk menghilangkan atribut hidden, gunakan method removeAttribute dari elemen yang kita tuju.

    Mendekati akhir dari penutup tag <script>, kita perlu menambah kode event handler untuk event onload dari elemen body. Pada umumnya, menambahkan sebuah event handler pada sebuah event yang berasal dari sebuah elemen HTML tertentu akan mengikuti sintaks berikut:

        elemen.<nama_event> = <fungsi_event_handler>;

    Pada kasus menulis event handler onload di sini, maka kode yang ditulis di antara tag <script> adalah:

        document.body.onload = welcome;

    Pastikan bahwa kode di antara tag <script> berbentuk seperti ini:

        <script>
            function welcome(){
                    alert("Sim salabim muncullah elemen-elemen HTML!")
                        const contents = document.querySelector(".contents");
                        contents.removeAttribute("hidden");
            }
            document.body.onload = welcome;
        </script>

    Coba buka kembali berkas HTML tersebut setelah di-save, maka akan muncul pesan di dalam dialog box alert yakni “sim salabim muncullah elemen-elemen HTML” pada berkas HTML di atas!

    Ajaib! Semua elemen HTML seketika muncul. Langkah selanjutnya adalah menambahkan event handler untuk event onclick pada tombol yang memiliki tulisan “Tekan Aku :)”. Karena jika saat ini kita tekan tombolnya, masih belum ada perubahan pada halaman web seperti yang diperlihatkan di awal materi ini.




Menambahkan Event Handler - Membuat event handler onclick
    Semenjak adanya implementasi event handler onload, semua elemen HTML kita sudah bisa terlihat. Walau begitu, mengapa ketika menekan tombol “Tekan Aku :)” tidak terjadi apa-apa? Pada praktik inilah kita akan mengubah tulisan di bawah tombol untuk menghitung berapa kali user menekan tombol tersebut. Selain itu juga memberikan kejutan lucu ketika sudah menekan tombol sebanyak 7 kali. Penasaran? Mari kita langsung ngoding!

    Buka berkas HTML dan tambahkan fungsi bernama increment yang akan menampilkan jumlah berapa kali user menekan tombol melalui event onclick. Fungsi tersebut diletakkan di antara tag <script> pada baris paling awal.

        function increment(){
            document.getElementById("count").innerText++;
        }

    Pada kode di atas, kita akan menambahkan text melalui proses operator increment (++) pada elemen yang memiliki id “count” yang awalnya memiliki teks “0”. Jangan lupa untuk menambahkan event handler pada event onclick pada elemen button.

        document.getElementById("incrementButton").onclick = increment;

    Keren nih. Sekarang setiap kali tombol ditekan, teks angka “0” akan terus bertambah.

    Setelah fungsi tombol sudah berjalan sesuai keinginan kita, sekarang saatnya menambahkan fitur kejutan rahasia ketika tombol ditekan sebanyak 7 kali. Mari modifikasi fungsi increment() menjadi sebagai berikut.

        function increment(){
            document.getElementById("count").innerText++;
        
            if (document.getElementById("count").innerText == 7){
                const hiddenMessage = document.createElement("h4");
                hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                const image = document.createElement("img");
                image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                const contents = document.querySelector(".contents");
                contents.appendChild(hiddenMessage).appendChild(image);
            }
        }

    Tambahan kode di atas akan mengecek apakah jumlah tekanan pada tombol sudah sama dengan 7. Jika iya, event handler tersebut akan menambahkan dua elemen baru, yakni elemen hiddenMessage yang berisi pesan tersembunyi dan elemen image yang berisi gambar rahasia.

    Dengan begitu, isi dari tag <script> di atas akan memiliki bentuk akhir sebagai berikut:

        <script>
            function increment(){
                document.getElementById("count").innerText++;
            
                if (document.getElementById("count").innerText == 7){
                    const hiddenMessage = document.createElement("h4");
                    hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                    const image = document.createElement("img");
                    image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                    const contents = document.querySelector(".contents");
                    contents.appendChild(hiddenMessage).appendChild(image);
                }
            }
        
            function welcome(){
                alert("Sim salabim muncullah elemen-elemen HTML!")
                const contents = document.querySelector(".contents");
                contents.removeAttribute("hidden");
            }
        
            document.getElementById("incrementButton").onclick = increment;
            document.body.onload = welcome;
        </script>

    Sehingga, halaman web kita akan memiliki semua fungsionalitas seperti yang diperlihatkan di awal.

    Halaman web kita sudah menjadi sangat interaktif dan menarik hanya melalui beberapa kode JavaScript saja. Cobalah bereksperimen dengan menambahkan beberapa event pada elemen-elemen baru serta event handler-nya juga.




Menambahkan Event Handler - Menerapkan event handler inline
    Mungkin Anda sudah sangat familiar dengan istilah inline. Tahukah Anda bahwa kita bisa menerapkan event handler di dalam tag HTML dan tidak perlu menerapkan sintaks event handler dalam tag <script>?

    Coba berikan tanda komentar terlebih dahulu pada kode event handler di dalam berkas HTML yang baru kita selesaikan.

        <script>
            function increment(){
                document.getElementById("count").innerText++;
            
                if (document.getElementById("count").innerText == 7){
                    const hiddenMessage = document.createElement("h4");
                    hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                    const image = document.createElement("img");
                    image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                    const contents = document.querySelector(".contents");
                    contents.appendChild(hiddenMessage).appendChild(image);
                }
            }
        
            function welcome(){
                alert("Sim salabim muncullah elemen-elemen HTML!")
                const contents = document.querySelector(".contents");
                contents.removeAttribute("hidden");
            }
        
            // document.getElementById("incrementButton").onclick = increment;
            // document.body.onload = welcome;
        </script>

    Jika event handler kedua telah di-komen, maka halaman web telah kehilangan semua fitur yang telah kita implementasikan sebelumnya. Tenang, semua fiturnya akan kita kembalikan melalui inline event handler, yakni menulis event handler di dalam bagian HTML. 

    Tambahkan event handler pada tag <body> dan <button> sebagai berikut (perhatikan tulisan yang sudah di-bold):

        <!DOCTYPE html>
        <html>
            <head>
                <title>Event World</title>
                <style>
                    .contents{
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        border: 1px solid black;
                        border-width:2px;
                        padding : 15px;
                    }
        
                    #generateButton{
                        margin-top : 5px;
                        margin-bottom: 15px;;
                    }
                </style>
            </head>
            <body onload="welcome()">
                <div class="contents" align="center" hidden>
                    <button id="incrementButton" onclick="increment()">Tekan Aku :)</button>
                    <h3>Kamu sudah menekan tombol di atas sebanyak <span id="count">0</span></h3>
                </div>
            
                <script>
                    function increment(){
                        document.getElementById("count").innerText++;
                        
                        if (document.getElementById("count").innerText == 7){
                            const hiddenMessage = document.createElement("h4");
                            hiddenMessage.innerText = "Selamat! Anda menemukan hadiah tersembunyi..."
                            const image = document.createElement("img");
                            image.setAttribute("src", "https://i.ibb.co/0V49VRZ/catto.jpg");
                            const contents = document.querySelector(".contents");
                            contents.appendChild(hiddenMessage).appendChild(image);
                        }
                    }
        
                    function welcome(){
                        alert("Sim salabim muncullah elemen-elemen HTML!")
                        const contents = document.querySelector(".contents");
                        contents.removeAttribute("hidden");
                    }
        
                    // document.getElementById("incrementButton").onclick = increment;
                    // document.body.onload = welcome;
                </script>
            </body>
        </html>
        
    Simpan semua perubahan pada berkas event.html, dan buka kembali. Tada! Semua fungsionalitas dari halaman web kita kembali seperti semula.

    Sampai di sini kita sudah mengetahui bagaimana menerapkan event handler untuk elemen-elemen HTML. Namun, ada satu lagi trik untuk menerapkan hal yang serupa dengan event handler yakni melalui method addEventListener() milik sebuah elemen HTML. Penasaran? Yuk, kita lanjut ke materi berikutnya.