Ubah Arsitektur Tightly Coupled Menjadi Loosely Coupled
    Saat membangun arsitektur cloud, buatlah agar setiap komponennya tidak saling bergantung satu sama lain, alias loosely coupled. Sehingga ketika satu komponen mengalami kegagalan, komponen lain tidak akan terpengaruh. Coba perhatikan contoh gambar arsitektur aplikasi pesanan di bawah ini. 

    202106041654262fd10f8db338c608f40e24e668a946c7.png

    Pada contoh di atas, aplikasi bertanggung jawab untuk menangani dan mempertahankan data pesanan, serta menangani peningkatan lalu lintas untuk beberapa permintaan yang sangat populer.

    Tahukah Anda? Salah satu titik kerentanan yang potensial dalam alur kerja pemrosesan pesanan adalah pada saat menyimpan data ke dalam database. Bisnis tentunya mengharapkan bahwa setiap pesanan segera disimpan ke dalam database. Namun, setiap potensi deadlock (kebuntuan) atau masalah jaringan dapat menyebabkan kegagalan dalam penyimpanan pesanan. Kemudian, pesanan pun akan hilang tanpa ada jalan lain untuk memulihkannya.

    Dengan kemampuan log yang baik, Anda mungkin dapat mengidentifikasi kapan terjadi kesalahan dan pesanan pelanggan mana yang gagal. Walaupun hal itu tidak akan memulihkan transaksi kembali.

    20210604165438f5fa35b485f3ed1fa1109b8cdf32d4b4.png

    Di sini kita menggunakan SQS Customer Order Queue sebagai penghubung sekaligus buffer antara instance front-end dan back-end yang melakukan pemrosesan pesanan. 

    Setiap pesanan pelanggan dilayani oleh instance front-end. Proses ini akan berjalan sangat cepat karena front-end terbebas dari ketergantungan proses di back-end. Kemudian, instance front-end meneruskan pesanan pelanggan ke Customer Order Queue. 

    Selanjutnya, pesanan yang berada di Queue akan diproses oleh instance back-end yang dapat melakukan scaling secara otomatis. Setelah itu, barulah pesanan pelanggan disimpan dan diproses di database. 

    Jika terdapat pesanan yang tidak terproses karena hal tertentu, pesanan tersebut akan disimpan di Dead Letter Queue, sehingga tim Anda dapat memeriksanya.






Manfaatkan Model Penetapan Harga di Amazon EC2
    Dalam merancang arsitektur, manfaatkanlah beberapa model penentuan harga pada Amazon EC2. Tentu kita telah mempelajari beberapa jenis penentuan harga EC2 instance, seperti On-Demand Instances, Reserved Instances, Savings Plans, dan Spot Instance. Untuk mempermudah penjelasan, silakan perhatikan gambar di bawah ini. 

    202106041655397f2eb0fcd081bf995b5faaf1faedcc30.png

    Grafik bagian kiri memperlihatkan lalu lintas yang dimiliki oleh suatu perusahaan aplikasi yang menggunakan On-Demand Instances. Dapat Anda lihat, terjadi lonjakan traffic selama jam kerja, lalu menurun kembali setelah menjelang malam.

    Nah, pada bagian kanan, perusahaan tersebut mengambil pendekatan yang lebih kompleks, yakni mencoba memanfaatkan ketiga model harga (Reserved Instances, On-Demand Instances, dan Spot Instances). 

    Perusahaan menggunakan Reserved Instances untuk memenuhi kebutuhan komputasi tingkat dasar atau sering disebut baseline. Jika kapasitas Reserved Instances tidak memadai, beberapa instance tambahan akan muncul sebagai On-Demand. Kemudian, untuk kebutuhan selanjutnya ditangani dengan Spot Instances. 

    Dengan demikian, perusahaan tersebut dapat menghemat dengan menggunakan Spot Instances daripada On-Demand. Namun, hal itu membuat perusahaan harus siap menghadapi penghentian (interupsi) instance yang tidak terduga dari AWS. Hal ini dapat menyebabkan hilangnya data atau kurangnya kapasitas yang tidak lagi memadai bagi pelanggan mereka. Itulah mengapa model Spot Instances hanya boleh diterapkan dalam keadaan di mana beban kerja Anda tidak akan mengalami masalah dengan mekanisme penghentian instance yang tiba-tiba. 

    Dengan Spot Instances, Anda cukup membayar harga Spot yang berlaku untuk periode waktu saat instance Anda berjalan. 

    Selain itu, untuk mengurangi dampak interupsi dan mengoptimalkan Spot Instances, lakukan diversifikasi dan jalankan aplikasi Anda di beberapa kumpulan kapasitas. Kelompokkan setiap instance family, setiap ukuran instance, di setiap Availability Zone, di setiap Region menjadi kumpulan Spot terpisah. Anda dapat menggunakan operasi API RequestSpotFleet untuk meluncurkan ribuan Spot Instances dan mendiversifikasi sumber daya secara otomatis.

    Untuk lebih mengurangi dampak gangguan, Anda juga dapat mengatur Spot Instances dan Spot Fleets (Armada Spot) untuk merespons pemberitahuan gangguan dengan menghentikan (stopping) atau menghibernasi (hibernate) daripada mengakhiri (terminate) instance saat kapasitas tidak lagi tersedia.
